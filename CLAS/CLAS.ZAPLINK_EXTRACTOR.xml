<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="0E085859F2A91854D2E8B4A48555D72C" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_EXTRACTOR" TYPE="CLAS" VERSION="1.01">
 <DIRECTORY DEVCLASS="ZAPLINK-FRAMEWORK-DEVTOOLS" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" UUID="769C4A4BD5991F32E1000000AC120173" EXPOSURE="2" STATE="1" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X" MSG_ID="ZAPLINK_EXTRACTOR">
   <TEXTS>
    <ITEM LANGU="E" DESCRIPT="ZAP Link : Package Extractor"/>
   </TEXTS>
  </A0_MAINDATA>
  <ALIASES>
   <ITEM CMPNAME="BALLOG_OBJECT" VERSION="1" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="BALLOG_OBJECT"/>
   <ITEM CMPNAME="COMP_NODENAME" VERSION="1" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="COMP_NODENAME"/>
   <ITEM CMPNAME="EXISTS" VERSION="1" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="EXISTS"/>
   <ITEM CMPNAME="EXT_SEP" VERSION="1" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="EXT_SEP"/>
   <ITEM CMPNAME="FILE_EXT" VERSION="1" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="FILE_EXT"/>
   <ITEM CMPNAME="LINE_SEPARATOR" VERSION="1" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="LINE_SEPARATOR"/>
   <ITEM CMPNAME="TD_ABAPSOURCE" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_ABAPSOURCE"/>
   <ITEM CMPNAME="TD_CHECKSUM" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CHECKSUM"/>
   <ITEM CMPNAME="TD_CLASSNAME" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CLASSNAME"/>
   <ITEM CMPNAME="TD_COMPEXISTS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_COMPEXISTS"/>
   <ITEM CMPNAME="TD_COMPNAME" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_COMPNAME"/>
   <ITEM CMPNAME="TD_COMPTEXT" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_COMPTEXT"/>
   <ITEM CMPNAME="TD_COMPTYPE" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_COMPTYPE"/>
   <ITEM CMPNAME="TD_CONNCLASS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONNCLASS"/>
   <ITEM CMPNAME="TD_CONNEXISTS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONNEXISTS"/>
   <ITEM CMPNAME="TD_CONNUUID" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONNUUID"/>
   <ITEM CMPNAME="TD_CONNVER" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONNVER"/>
   <ITEM CMPNAME="TD_CONTNAME" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONTNAME"/>
   <ITEM CMPNAME="TD_CONTVER" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONTVER"/>
   <ITEM CMPNAME="TD_DEVCLASS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_DEVCLASS"/>
   <ITEM CMPNAME="TD_DOC_ID" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_DOC_ID"/>
   <ITEM CMPNAME="TD_EXISTS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_EXISTS"/>
   <ITEM CMPNAME="TD_FILENAME" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_FILENAME"/>
   <ITEM CMPNAME="TD_FILETYPE" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_FILETYPE"/>
   <ITEM CMPNAME="TD_LANG" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_LANG"/>
   <ITEM CMPNAME="TD_LIGHT" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_LIGHT"/>
   <ITEM CMPNAME="TD_OBJ_TYPE" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_OBJ_TYPE"/>
   <ITEM CMPNAME="TD_ORDERKIND" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_ORDERKIND"/>
   <ITEM CMPNAME="TD_PROGNAME" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_PROGNAME"/>
   <ITEM CMPNAME="TD_SEL_ACTION" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_SEL_ACTION"/>
   <ITEM CMPNAME="TD_SUBSTITUTIONKIND" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_SUBSTITUTIONKIND"/>
   <ITEM CMPNAME="TD_TRANSPORT_REQUEST" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TRANSPORT_REQUEST"/>
   <ITEM CMPNAME="TD_TXTP_ID" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TXTP_ID"/>
   <ITEM CMPNAME="TD_TXTP_KIND" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TXTP_KIND"/>
   <ITEM CMPNAME="TD_TXTP_LEN" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TXTP_LEN"/>
   <ITEM CMPNAME="TD_TXTP_TEXT" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TXTP_TEXT"/>
   <ITEM CMPNAME="TD_TYPEORDER" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TYPEORDER"/>
   <ITEM CMPNAME="TD_TYPE_AS_TEXT" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TYPE_AS_TEXT"/>
   <ITEM CMPNAME="TEXTPOOL_KINDS" VERSION="1" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TEXTPOOL_KINDS"/>
   <ITEM CMPNAME="TO_COMPONENT" VERSION="1" EXPOSURE="1" CMPTYPE="3" REFCLSNAME="ZAPLINK_KERNEL_TYPES" REFCMPNAME="TO_COMPONENT"/>
   <ITEM CMPNAME="TO_CONTAINER" VERSION="1" EXPOSURE="1" CMPTYPE="3" REFCLSNAME="ZAPLINK_KERNEL_TYPES" REFCMPNAME="TO_CONTAINER"/>
   <ITEM CMPNAME="TO_FILE" VERSION="1" EXPOSURE="1" CMPTYPE="3" REFCLSNAME="ZAPLINK_KERNEL_TYPES" REFCMPNAME="TO_FILE"/>
   <ITEM CMPNAME="TO_LIST" VERSION="1" EXPOSURE="1" CMPTYPE="3" REFCLSNAME="ZAPLINK_KERNEL_TYPES" REFCMPNAME="TO_LIST"/>
   <ITEM CMPNAME="TO_MSG_COLL" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_KERNEL_TYPES" REFCMPNAME="TO_MSG_COLL"/>
   <ITEM CMPNAME="TO_RAW" VERSION="1" EXPOSURE="1" CMPTYPE="3" REFCLSNAME="ZAPLINK_KERNEL_TYPES" REFCMPNAME="TO_RAW"/>
   <ITEM CMPNAME="TO_RAW_BASE" VERSION="1" EXPOSURE="1" CMPTYPE="3" REFCLSNAME="ZAPLINK_KERNEL_TYPES" REFCMPNAME="TO_RAW_BASE"/>
   <ITEM CMPNAME="TO_XML" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TO_XML"/>
   <ITEM CMPNAME="TR_AUTHOR" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_AUTHOR"/>
   <ITEM CMPNAME="TR_COMPNAME" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_COMPNAME"/>
   <ITEM CMPNAME="TR_COMPTYPE" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_COMPTYPE"/>
   <ITEM CMPNAME="TR_DLVUNIT" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_DLVUNIT"/>
   <ITEM CMPNAME="TR_DOCID" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_DOCID"/>
   <ITEM CMPNAME="TR_PACKAGES" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_PACKAGES"/>
   <ITEM CMPNAME="TR_SRCSYSTEM" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_SRCSYSTEM"/>
   <ITEM CMPNAME="TR_TR" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_TR"/>
   <ITEM CMPNAME="TS_BASE_ATTRIBUTS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_BASE_ATTRIBUTS"/>
   <ITEM CMPNAME="TS_COMPKEY" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_COMPKEY"/>
   <ITEM CMPNAME="TS_COMPONENT" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_COMPONENT"/>
   <ITEM CMPNAME="TS_CONNDATA" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_CONNDATA"/>
   <ITEM CMPNAME="TS_CONN_CLASS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_CONN_CLASS"/>
   <ITEM CMPNAME="TS_CONN_DEF" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_CONN_DEF"/>
   <ITEM CMPNAME="TS_CONTDATA" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_CONTDATA"/>
   <ITEM CMPNAME="TS_DIRECTORY" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_DIRECTORY"/>
   <ITEM CMPNAME="TS_DOC" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_DOC"/>
   <ITEM CMPNAME="TS_HEAD" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_HEAD"/>
   <ITEM CMPNAME="TS_LANG" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_LANG"/>
   <ITEM CMPNAME="TS_TXTP_TEXT" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_TXTP_TEXT"/>
   <ITEM CMPNAME="TS_TXTP_TEXTPOOL" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_TXTP_TEXTPOOL"/>
   <ITEM CMPNAME="TS_TYPE" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_TYPE"/>
   <ITEM CMPNAME="TT_ABAPRAWSOURCE" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_ABAPRAWSOURCE"/>
   <ITEM CMPNAME="TT_COMPKEYS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_COMPKEYS"/>
   <ITEM CMPNAME="TT_CONN_CLASSES" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_CONN_CLASSES"/>
   <ITEM CMPNAME="TT_DOCS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_DOCS"/>
   <ITEM CMPNAME="TT_RAWTEXT" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_RAWTEXT"/>
   <ITEM CMPNAME="TT_TXTP_TEXTPOOLS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_TXTP_TEXTPOOLS"/>
   <ITEM CMPNAME="TT_TXTP_TEXTS" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_TXTP_TEXTS"/>
   <ITEM CMPNAME="TT_TYPES" VERSION="1" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_TYPES"/>
  </ALIASES>
  <ATTRIBUTS>
   <ITEM CMPNAME="APPLICATION_LOG" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="1" TYPE="TO_MSG_COLL">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Message Collector: Standard Implementation"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="BALLOG_SUBOBJECT" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="4 " ATTDECLTYP="2" ATTVALUE="&apos;EXTRACTOR&apos;" TYPTYPE="1" TYPE="BALSUBOBJ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Application Log: Subobject"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="FILE_SEP" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="2 " ATTDECLTYP="1" ATTRDONLY="X" TYPTYPE="1" TYPE="C">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="File/directory Separator"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="O_CX" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="5 " TYPTYPE="3" TYPE="ZAPLINK_CX">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPlink Framework : Root exception class"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="O_MYCX" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="3" TYPE="ZAPLINK_CX">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPlink Framework : Root exception class"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="XMLENGINE" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " ATTDECLTYP="1" TYPTYPE="3" TYPE="IF_IXML">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="XML Engine"/>
    </TEXTS>
   </ITEM>
  </ATTRIBUTS>
  <DEFERRED>
   <CLASSES>
    <ITEM TYPEGROUP="ZAPLINK_FILE" VERSION="1" TPUTYPE="1" IMPLICIT="X"/>
   </CLASSES>
  </DEFERRED>
  <INTERFACES>
   <ITEM REFCLSNAME="ZAPLINK_DATATYPES" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1"/>
   <ITEM REFCLSNAME="ZAPLINK_KERNEL_TYPES" VERSION="1" EXPOSURE="2" STATE="1" RELTYPE="1"/>
  </INTERFACES>
  <LOCAL>
   <TYPES>
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature
</TYPES>
   <IMPLEMENTATIONS>
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes
</IMPLEMENTATIONS>
   <MACROS>
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* in the implementation part of the class

INCLUDE ZAPLINK_MACROS.</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="CLASS_CONSTRUCTOR" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="3 " MTDTYPE="2" MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="CLASS_CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>
  xmlengine = cl_ixml=&gt;create( ).

  CALL METHOD cl_gui_frontend_services=&gt;get_file_separator
    CHANGING
      file_separator       = file_sep
    EXCEPTIONS
      cntl_error           = 1
      error_no_gui         = 2
      not_supported_by_gui = 3
      OTHERS               = 4.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CONCATENATE_PATH" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="8 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Generate XML full file path"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DIRECTORY" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DIRECTORYNAME">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Client Directory"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="FILENAME" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_FILENAME"/>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="3 " PARDECLTYP="3" TYPTYPE="1" TYPE="TD_FILENAME"/>
    </PARAMETERS>
    <SOURCE>
  DATA len TYPE i.

  IF directory IS INITIAL.    result = filename.    RETURN.   ENDIF.
  len = STRLEN( directory ) - 1.
  IF directory+len(1) &lt;&gt; file_sep.
    CONCATENATE directory file_sep filename INTO result.
  ELSE.
    CONCATENATE directory filename INTO result.
  ENDIF.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CONSTRUCTOR" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="2 " MTDTYPE="2">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>

  CREATE OBJECT application_log.
  CALL METHOD application_log-&gt;init
    EXPORTING
      id_object      = ballog_object
      id_subobject   = ballog_subobject
*      id_extnumber   =
      auto_upd_custo = abap_true
*      id_activity    = ACT_CREATE
    EXCEPTIONS
      error          = 1
      OTHERS         = 2.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CREATE_FILENAME" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Generate XML filename"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="NAME" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_COMPNAME"/>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="3 " PARDECLTYP="3" TYPTYPE="1" TYPE="TD_FILENAME"/>
     <ITEM SCONAME="TYPE" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_COMPTYPE"/>
    </PARAMETERS>
    <SOURCE>
  CONCATENATE type ext_sep name ext_sep file_ext INTO result.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CREATE_FULLPATH_BY_DEVC" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="3 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Generate XML full file path based on devlopment classes"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMP" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT"/>
     <ITEM SCONAME="DIRECTORY" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DIRECTORYNAME">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Client Directory"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="3 " PARDECLTYP="3" TYPTYPE="1" TYPE="TD_FILENAME"/>
    </PARAMETERS>
    <SOURCE>
  DATA filename    TYPE td_filename.
  DATA _comp       TYPE ts_component.
  DATA d_devc      TYPE td_devclass.
  DATA _directory  TYPE td_directoryname.
  DATA rc          TYPE sy-subrc.
  DATA len TYPE i.

  CHECK comp IS BOUND.

  d_devc = comp-&gt;get_devclass( ).
  _comp = comp-&gt;get_key( ).
  filename = create_filename( type = _comp-type
                              name = _comp-name ).
  _directory = get_devc_path( directory = directory
                               devclass = d_devc ).
  _directory = concatenate_path( directory = directory
                                  filename = _directory ).

  CALL METHOD cl_gui_frontend_services=&gt;directory_create
    EXPORTING
      directory                = _directory
    CHANGING
      rc                       = rc
    EXCEPTIONS
      directory_create_failed  = 1
      cntl_error               = 2
      error_no_gui             = 3
      directory_access_denied  = 4
      directory_already_exists = 0
      path_not_found           = 6
      unknown_error            = 7
      not_supported_by_gui     = 8
      wrong_parameter          = 9
      OTHERS                   = 10.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  result = concatenate_path( directory = _directory
                              filename = filename ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CREATE_FULLPATH_BY_TYPE" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="4 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Generate XML full file path based on component type"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMP" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT"/>
     <ITEM SCONAME="DIRECTORY" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DIRECTORYNAME">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Client Directory"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="3 " PARDECLTYP="3" TYPTYPE="1" TYPE="TD_FILENAME"/>
    </PARAMETERS>
    <SOURCE>
  DATA _comp       TYPE ts_component.
  DATA filename    TYPE td_filename.
  DATA _directory  TYPE td_directoryname.
  DATA rc          TYPE sy-subrc.

  CHECK comp IS BOUND.

  _comp = comp-&gt;get_key( ).
  filename = _comp-type.
  _directory = concatenate_path( directory = directory
                                  filename = filename ).

  CALL METHOD cl_gui_frontend_services=&gt;directory_create
    EXPORTING
      directory                = _directory
    CHANGING
      rc                       = rc
    EXCEPTIONS
      directory_create_failed  = 1
      cntl_error               = 2
      error_no_gui             = 3
      directory_access_denied  = 4
      directory_already_exists = 0
      path_not_found           = 6
      unknown_error            = 7
      not_supported_by_gui     = 8
      wrong_parameter          = 9
      OTHERS                   = 10.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  filename = create_filename( type = _comp-type
                              name = _comp-name ).
  result = concatenate_path( directory = _directory
                              filename = filename ).
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="EXTRACT_BY_PACKAGE" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="4 ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Extrac all package components by package heirachy"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="AUTHOR" VERSION="1" CMPTYPE="1" EDITORDER="7 " PARPASSTYP="1" TYPTYPE="1" TYPE="TR_AUTHOR"/>
     <ITEM SCONAME="EXT" VERSION="1" CMPTYPE="1" EDITORDER="6 " PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL"/>
     <ITEM SCONAME="NAME" VERSION="1" CMPTYPE="1" EDITORDER="4 " PARPASSTYP="1" TYPTYPE="1" TYPE="TR_COMPNAME"/>
     <ITEM SCONAME="PACKAGES" VERSION="1" CMPTYPE="1" EDITORDER="5 " PARPASSTYP="1" TYPTYPE="1" TYPE="TR_PACKAGES"/>
     <ITEM SCONAME="SRCSYSTEM" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARPASSTYP="1" TYPTYPE="1" TYPE="TR_SRCSYSTEM">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Package"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="TARGET_DIR" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DIRECTORYNAME">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Client Directory"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="TYPE" VERSION="1" CMPTYPE="1" EDITORDER="3 " PARPASSTYP="1" TYPTYPE="1" TYPE="TR_COMPTYPE"/>
    </PARAMETERS>
    <SOURCE>
  DATA filename    TYPE td_filename.
  DATA t_keys      TYPE tt_compkeys.
  DATA o_list      TYPE to_list.
  DATA o_comp      TYPE to_component.
  DATA o_conn      TYPE to_connector.
  DATA o_cnx_clean TYPE to_connector_cleaner.
  DATA _comp       TYPE ts_component.
  DATA o_raw       TYPE REF TO zaplink_raw.
  FIELD-SYMBOLS:
    &lt;k&gt;    LIKE LINE OF t_keys.
  DATA _cx_list TYPE REF TO zaplink_cx_list.
  DATA _cx_cnx  TYPE REF TO zaplink_cx_connector.
  DATA _cx_comp TYPE REF TO zaplink_cx_component.

  t_keys = zaplink_tools=&gt;get_keys_from_tadir( srcsystem = srcsystem
                                                   type  = type
                                                    name = name
                                                packages = packages
                                                     ext = ext
                                                  author = author ).
  CHECK NOT t_keys IS INITIAL.

  CREATE OBJECT o_list.
  o_list-&gt;add_keys( t_keys ).
  o_list-&gt;select_default( zaplink_list=&gt;sel_actions-export ).
* Initialize Interator
  TRY.
      o_list-&gt;order_kind = zaplink_list=&gt;order_kinds-no_order.
      o_list-&gt;init_sel_iter( ).
      o_list-&gt;display_progress = abap_true.
      o_comp = o_list-&gt;get_next( ).
    CATCH zaplink_cx_list INTO _cx_list.
* Failed to components list. Due to exception &apos;&amp;CX_NAME&amp;&apos;.
      CREATE OBJECT o_mycx
        EXPORTING
          textid  = zaplink_cx_component=&gt;invalid_exception
          prev_cx = _cx_list.
      o_mycx-&gt;update( ).
      RAISE EXCEPTION o_mycx.
  ENDTRY.

  WHILE o_comp IS BOUND.
    TRY.
        o_comp-&gt;set_with_subcomp( abap_false ).
        _comp = o_comp-&gt;get_key( ).
        o_conn = o_comp-&gt;connector( ).
      CATCH zaplink_cx_component INTO _cx_comp.
        CREATE OBJECT _cx_cnx
          EXPORTING
            textid  = zaplink_cx_container=&gt;add_failed
            prev_cx = _cx_comp.
        _cx_cnx-&gt;update( ).
        o_comp-&gt;set_exception( _cx_cnx ).
* Failed to add component &apos;&amp;NAME&amp;&apos; (&amp;TYPE&amp;). Look at exception &amp; message collector in component to get the root cause.
        RAISE EXCEPTION TYPE zaplink_cx_container
                   EXPORTING textid = zaplink_cx_container=&gt;add_comp_failed
                               type = _comp-type
                               name = _comp-name.
    ENDTRY.

    IF o_conn IS BOUND.
* Extract Component
      TRY.
          o_raw = o_conn-&gt;read_from_sap( o_comp ).
          TRY.
              CLEAR o_cnx_clean.
              o_cnx_clean ?= o_conn.
            CATCH cx_root.
          ENDTRY.
          IF o_cnx_clean IS BOUND.    o_cnx_clean-&gt;anonymize( o_raw ).    ENDIF.
          o_raw-&gt;update_connector_data( o_conn ).
        CATCH zaplink_cx_connector INTO _cx_cnx.
          o_comp-&gt;set_exception( _cx_cnx ).
          TRY.
              o_comp-&gt;set_msg_coll( o_conn-&gt;application_log ).
            CATCH cx_root.
          ENDTRY.
** Failed to add component &apos;&amp;NAME&amp;&apos; (&amp;TYPE&amp;). Look at exception &amp; message collector in component to get the root cause.
*          RAISE EXCEPTION TYPE zaplink_cx_container
*                     EXPORTING textid = zaplink_cx_container=&gt;add_comp_failed
*                                 type = _comp-type
*                                 name = _comp-name.
      ENDTRY.

      IF NOT o_raw IS BOUND.
** Failed to add component &apos;&amp;NAME&amp;&apos; (&amp;TYPE&amp;). Look at exception &amp; message collector in component to get the root cause.
*        RAISE EXCEPTION TYPE zaplink_cx_container
*                   EXPORTING textid = zaplink_cx_container=&gt;add_comp_failed
*                               type = _comp-type
*                               name = _comp-name.
      ELSE.
        filename = create_fullpath_by_devc( directory = target_dir
                                                 comp = o_comp ).
        CALL METHOD save_file
          EXPORTING
            o_raw    = o_raw
            filename = filename.
      ENDIF.
    ENDIF.

    TRY.
        o_comp = o_list-&gt;get_next( ).
      CATCH zaplink_cx_list INTO _cx_list.
        EXIT.
    ENDTRY.
  ENDWHILE.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="EXTRACT_BY_TYPE" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="5 ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Extrac all package components by types"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="AUTHOR" VERSION="1" CMPTYPE="1" EDITORDER="7 " PARPASSTYP="1" TYPTYPE="1" TYPE="TR_AUTHOR"/>
     <ITEM SCONAME="EXT" VERSION="1" CMPTYPE="1" EDITORDER="6 " PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL"/>
     <ITEM SCONAME="NAME" VERSION="1" CMPTYPE="1" EDITORDER="4 " PARPASSTYP="1" TYPTYPE="1" TYPE="TR_COMPNAME"/>
     <ITEM SCONAME="PACKAGES" VERSION="1" CMPTYPE="1" EDITORDER="5 " PARPASSTYP="1" TYPTYPE="1" TYPE="TR_PACKAGES"/>
     <ITEM SCONAME="SRCSYSTEM" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARPASSTYP="1" TYPTYPE="1" TYPE="TR_SRCSYSTEM">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Package"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="TARGET_DIR" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DIRECTORYNAME">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Client Directory"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="TYPE" VERSION="1" CMPTYPE="1" EDITORDER="3 " PARPASSTYP="1" TYPTYPE="1" TYPE="TR_COMPTYPE"/>
    </PARAMETERS>
    <SOURCE>
  DATA directory   TYPE string.
  DATA filename    TYPE td_filename.
  DATA t_keys      TYPE tt_compkeys.
  DATA rc          TYPE sy-subrc.
  DATA o_list      TYPE to_list.
  DATA o_comp      TYPE to_component.
  DATA o_conn      TYPE to_connector.
  DATA o_cnx_clean TYPE to_connector_cleaner.
  DATA o_raw       TYPE REF TO zaplink_raw.
  DATA o_pack_raw  TYPE REF TO zaplink_devc_data.
  DATA _comp       TYPE zaplink_component=&gt;ts_component.

  DATA _cx_cnx  TYPE REF TO zaplink_cx_connector.
  DATA _cx_comp TYPE REF TO zaplink_cx_component.
  DATA _cx_list TYPE REF TO zaplink_cx_list.

  FIELD-SYMBOLS:
    &lt;k&gt;    LIKE LINE OF t_keys.

  t_keys = zaplink_tools=&gt;get_keys_from_tadir( srcsystem = srcsystem
                                                   type  = type
                                                    name = name
                                                packages = packages
                                                     ext = ext
                                                  author = author ).

  IF NOT t_keys IS INITIAL.
    SORT t_keys BY type.
    LOOP AT t_keys ASSIGNING &lt;k&gt;.
      AT NEW type.
        TRY.
            IF zaplink_connectors=&gt;do_exists( &lt;k&gt;-type ) = abap_true.
* Create Directory
              filename = &lt;k&gt;-type.
              directory = concatenate_path( directory = target_dir
                                             filename = filename ) .

              CALL METHOD cl_gui_frontend_services=&gt;directory_create
                EXPORTING
                  directory                = directory
                CHANGING
                  rc                       = rc
                EXCEPTIONS
                  directory_create_failed  = 1
                  cntl_error               = 2
                  error_no_gui             = 3
                  directory_access_denied  = 4
                  directory_already_exists = 0
                  path_not_found           = 6
                  unknown_error            = 7
                  not_supported_by_gui     = 8
                  wrong_parameter          = 9
                  OTHERS                   = 10.
              IF sy-subrc &lt;&gt; 0.
                MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                           WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
              ENDIF.
            ENDIF.
          CATCH zaplink_cx.
            DELETE t_keys WHERE type = &lt;k&gt;-type.
        ENDTRY.
      ENDAT.
    ENDLOOP.
    CREATE OBJECT o_list.
    o_list-&gt;add_keys( t_keys ).
    o_list-&gt;select_default( zaplink_list=&gt;sel_actions-export ).

* Initialize Interator
    TRY.
        o_list-&gt;order_kind = zaplink_list=&gt;order_kinds-no_order.
        o_list-&gt;init_sel_iter( ).
        o_list-&gt;display_progress = abap_true.
        o_comp = o_list-&gt;get_next( ).
      CATCH zaplink_cx_list INTO _cx_list.
* Failed to components list. Due to exception &apos;&amp;CX_NAME&amp;&apos;.
        CREATE OBJECT o_mycx
          EXPORTING
            textid  = zaplink_cx_component=&gt;invalid_exception
            prev_cx = _cx_list.
        o_mycx-&gt;update( ).
        RAISE EXCEPTION o_mycx.
    ENDTRY.

    WHILE o_comp IS BOUND.
      TRY.
          o_comp-&gt;set_with_subcomp( abap_false ).
          _comp = o_comp-&gt;get_key( ).
          o_conn = o_comp-&gt;connector( ).
        CATCH zaplink_cx_component INTO _cx_comp.
          CREATE OBJECT _cx_cnx
            EXPORTING
              textid  = zaplink_cx_container=&gt;add_failed
              prev_cx = _cx_comp.
          _cx_cnx-&gt;update( ).
          o_comp-&gt;set_exception( _cx_cnx ).
* Failed to add component &apos;&amp;NAME&amp;&apos; (&amp;TYPE&amp;). Look at exception &amp; message collector in component to get the root cause.
          RAISE EXCEPTION TYPE zaplink_cx_container
                     EXPORTING textid = zaplink_cx_container=&gt;add_comp_failed
                                 type = _comp-type
                                 name = _comp-name.
      ENDTRY.

      IF o_conn IS BOUND.
* Extract Component
        TRY.
*          o_conn-&gt;options = _options.
            o_raw = o_conn-&gt;read_from_sap( o_comp ).
*          o_comp-&gt;set_msg_coll( o_conn-&gt;application_log ).
            TRY.
                CLEAR o_cnx_clean.
                o_cnx_clean ?= o_conn.
              CATCH cx_root.
            ENDTRY.
            IF o_cnx_clean IS BOUND.
              o_cnx_clean-&gt;anonymize( o_raw ).
            ENDIF.
            o_raw-&gt;update_connector_data( o_conn ).
          CATCH zaplink_cx_connector INTO _cx_cnx.
            o_comp-&gt;set_exception( _cx_cnx ).
            TRY.
                o_comp-&gt;set_msg_coll( o_conn-&gt;application_log ).
              CATCH cx_root.
            ENDTRY.
** Failed to add component &apos;&amp;NAME&amp;&apos; (&amp;TYPE&amp;). Look at exception &amp; message collector in component to get the root cause.
*          RAISE EXCEPTION TYPE zaplink_cx_container
*                     EXPORTING textid = zaplink_cx_container=&gt;add_comp_failed
*                                 type = _comp-type
*                                 name = _comp-name.
        ENDTRY.
        IF NOT o_raw IS BOUND.
** Failed to add component &apos;&amp;NAME&amp;&apos; (&amp;TYPE&amp;). Look at exception &amp; message collector in component to get the root cause.
*        RAISE EXCEPTION TYPE zaplink_cx_container
*                   EXPORTING textid = zaplink_cx_container=&gt;add_comp_failed
*                               type = _comp-type
*                               name = _comp-name.
        ELSE.
          filename = create_fullpath_by_type( directory = target_dir
                                                   comp = o_comp ).
          CALL METHOD save_file
            EXPORTING
              o_raw    = o_raw
              filename = filename.
        ENDIF.
      ENDIF.

      TRY.
          o_comp = o_list-&gt;get_next( ).
        CATCH zaplink_cx_list INTO _cx_list.
          EXIT.
      ENDTRY.
    ENDWHILE.
  ENDIF.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="EXTRACT_CONNECTORS" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Extract connectors"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="PACKAGE" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARPASSTYP="1" TYPTYPE="1" TYPE="TR_PACKAGES">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Package filter"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="TARGET_DIR" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DIRECTORYNAME">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Client Directory"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX_CONNECTOR" VERSION="1" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>
  DATA o_generator TYPE REF TO zaplink_standalone_generator.
  DATA _cx         TYPE REF TO cx_root.
  DATA directory   TYPE string.
  DATA filename    TYPE td_filename.
  DATA packages    TYPE scompaklis.
  DATA t_keys      TYPE tt_compkeys.
  DATA rc          TYPE sy-subrc.
  DATA o_list      TYPE to_list.
  DATA o_file      TYPE to_file.
  DATA o_cnxlist   TYPE to_list.
  DATA o_contlist  TYPE to_list.
  DATA o_cont      TYPE to_container.
  DATA o_comp      TYPE to_component.
  DATA o_cnxcomp   TYPE to_component.
  DATA o_conn      TYPE to_connector.
  DATA o_cnx_clean TYPE to_connector_cleaner.
  DATA d_classname TYPE zaplink_standalone_generator=&gt;td_name.
  DATA o_raw       TYPE REF TO zaplink_raw.
  DATA _comp       TYPE zaplink_component=&gt;ts_component.
  DATA _cx_cnx  TYPE REF TO zaplink_cx_connector.
  DATA _cx_comp TYPE REF TO zaplink_cx_component.
  DATA _cx_list TYPE REF TO zaplink_cx_list.
  DATA s_cnxdata   TYPE ts_contdata.
  DATA d_msg       TYPE string.
  FIELD-SYMBOLS:
    &lt;m&gt; LIKE LINE OF o_generator-&gt;messages,
    &lt;i&gt; LIKE LINE OF o_generator-&gt;includes,
    &lt;c&gt; LIKE LINE OF o_generator-&gt;classes.

  TRY.
    o_list = zaplink_connectors_4extractor=&gt;get_connectorlist( ).
    o_list-&gt;select_default( zaplink_list=&gt;sel_actions-export ).

* Initialize Interator
    TRY.
        o_list-&gt;order_kind = zaplink_list=&gt;order_kinds-no_order.
        o_list-&gt;init_sel_iter( ).
        o_list-&gt;display_progress = abap_true.
        o_comp = o_list-&gt;get_next( ).
      CATCH zaplink_cx_list INTO _cx_list.
* Failed to components list. Due to exception &apos;&amp;CX_NAME&amp;&apos;.
        CREATE OBJECT o_mycx
          EXPORTING
            textid  = zaplink_cx_component=&gt;invalid_exception
            prev_cx = _cx_list.
        o_mycx-&gt;update( ).
        RAISE EXCEPTION o_mycx.
    ENDTRY.

    WHILE o_comp IS BOUND.
      CREATE OBJECT o_generator.
      o_generator-&gt;packages = package.
      CREATE OBJECT o_cnxlist.
      CREATE OBJECT o_file.

      TRY.
          o_comp-&gt;set_with_subcomp( abap_false ).
          _comp = o_comp-&gt;get_key( ).
* Load previous file
          TRY.
              CREATE OBJECT o_conn TYPE (_comp-name).
            CATCH cx_root INTO _cx.
              RAISE EXCEPTION TYPE zaplink_cx_connector
                         EXPORTING textid = zaplink_cx=&gt;system_error
                                 previous = _cx.
          ENDTRY.
          filename = o_conn-&gt;uuid.
          CONCATENATE filename ext_sep o_conn-&gt;version ext_sep file_ext INTO filename.
          filename = concatenate_path( directory = target_dir
                                        filename = filename ).
          o_file-&gt;set_filename( filename ).
          o_file-&gt;set_filetype( zaplink_file=&gt;c_ft_local ).
          CLEAR o_cont.
          IF o_file-&gt;file_exists( ) = abap_true.
            TRY.
                CREATE OBJECT o_cont
                  EXPORTING
                    o_file = o_file.
                CALL METHOD o_cont-&gt;load_from_file( ).
              CATCH zaplink_cx_container.
                CLEAR o_cont.
            ENDTRY.
          ENDIF.

* Get connector and dependenties
          d_classname = _comp-name.
          o_generator-&gt;add_object( d_classname ).
          LOOP AT o_generator-&gt;classes ASSIGNING &lt;c&gt;.
            CREATE OBJECT o_cnxcomp.
            o_cnxcomp-&gt;set_type( &apos;CLAS&apos; ).
            _comp-name = &lt;c&gt;-name.
            o_cnxcomp-&gt;set_name( _comp-name ).
            TRY.
                o_cnxlist-&gt;add( o_cnxcomp ).
              CATCH zaplink_cx INTO o_cx.
                IF o_cx-&gt;textid &lt;&gt; zaplink_cx_list=&gt;already_exists. RAISE EXCEPTION o_cx. ENDIF.
            ENDTRY.
          ENDLOOP.
          LOOP AT o_generator-&gt;includes ASSIGNING &lt;i&gt;.
            CREATE OBJECT o_cnxcomp.
            o_cnxcomp-&gt;set_type( &apos;PROG&apos; ).
            _comp-name = &lt;i&gt;.
            o_cnxcomp-&gt;set_name( _comp-name ).
            TRY.
                o_cnxlist-&gt;add( o_cnxcomp ).
              CATCH zaplink_cx INTO o_cx.
                IF o_cx-&gt;textid &lt;&gt; zaplink_cx_list=&gt;already_exists. RAISE EXCEPTION o_cx. ENDIF.
            ENDTRY.
          ENDLOOP.
          LOOP AT o_generator-&gt;messages ASSIGNING &lt;m&gt;.
            CREATE OBJECT o_cnxcomp.
            o_cnxcomp-&gt;set_type( &apos;MSAG&apos; ).
            _comp-name = &lt;m&gt;-name.
            o_cnxcomp-&gt;set_name( _comp-name ).
            TRY.
                o_cnxlist-&gt;add( o_cnxcomp ).
              CATCH zaplink_cx INTO o_cx.
                IF o_cx-&gt;textid &lt;&gt; zaplink_cx_list=&gt;already_exists. RAISE EXCEPTION o_cx. ENDIF.
            ENDTRY.
          ENDLOOP.

          o_cnxlist-&gt;select_default( zaplink_list=&gt;sel_actions-export ).

          IF NOT o_cont IS BOUND.
* No previous file
            _comp = o_comp-&gt;get_key( ).
            s_cnxdata-name = _comp-name.
            o_cont = zaplink_container=&gt;create_new( o_file = o_file
                                                      data = s_cnxdata ).
          ENDIF.
          o_cont-&gt;add_components( o_cnxlist ).

          o_cont-&gt;save_to_file( ).
* Change detected for connector : &amp;1 (&amp;2) in file &amp;3
          MESSAGE w002 WITH _comp-name o_conn-&gt;uuid filename INTO d_msg.
          WRITE:/ icon_green_light AS ICON, d_msg.
          o_contlist = o_cont-&gt;get_content( ).
          o_contlist-&gt;init_iter( ).
          o_cnxcomp = o_contlist-&gt;get_next( ).
          WHILE o_cnxcomp IS BOUND.
            _comp = o_cnxcomp-&gt;get_key( ).
            IF o_cnxlist-&gt;search( o_cnxcomp ) IS BOUND.
* Component (&amp;1) &amp;2 has changed and has been updated
              MESSAGE w004 WITH _comp-type _comp-name INTO d_msg.
              WRITE:/ space, space, icon_green_light AS ICON, d_msg.
            ELSE.
* Component (&amp;1) &amp;2 haven&apos;t change
              MESSAGE w003 WITH _comp-type _comp-name INTO d_msg.
              WRITE:/ space, space,icon_yellow_light AS ICON, d_msg.
            ENDIF.
            o_cnxcomp = o_contlist-&gt;get_next( ).
          ENDWHILE.
          WRITE:/ .

        CATCH zaplink_cx_component INTO _cx_comp.
          CREATE OBJECT _cx_cnx
            EXPORTING
              textid  = zaplink_cx_container=&gt;add_failed
              prev_cx = _cx_comp.
          _cx_cnx-&gt;update( ).
          o_comp-&gt;set_exception( _cx_cnx ).
* Failed to add component &apos;&amp;NAME&amp;&apos; (&amp;TYPE&amp;). Look at exception &amp; message collector in component to get the root cause.
          RAISE EXCEPTION TYPE zaplink_cx_container
                     EXPORTING textid = zaplink_cx_container=&gt;add_comp_failed
                                 type = _comp-type
                                 name = _comp-name.
      ENDTRY.

      TRY.
          o_comp = o_list-&gt;get_next( ).
        CATCH zaplink_cx_list INTO _cx_list.
          EXIT.
      ENDTRY.
    ENDWHILE.

    mac_def_catch zaplink_cx_connector.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_DEVC_PATH" VERSION="1" STATE="1" EDITORDER="1 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Build path from Devlopment class"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DEVCLASS" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DEVCLASS"/>
     <ITEM SCONAME="DIRECTORY" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DIRECTORYNAME">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Client Directory"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="3 " PARDECLTYP="3" TYPTYPE="1" TYPE="TD_DIRECTORYNAME">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Client Directory"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>
  TYPES: BEGIN OF ts_devc,
           devc TYPE td_devclass,
           path TYPE td_filename,
         END OF ts_devc.
  STATICS: t_devc TYPE SORTED TABLE OF ts_devc WITH UNIQUE KEY devc.
  DATA s_devc     LIKE LINE OF t_devc.
  DATA o_pack     TYPE REF TO if_package.
  DATA d_dir      TYPE td_directoryname.
  DATA rc          TYPE sy-subrc.

  s_devc-devc = devclass.
  READ TABLE t_devc INTO s_devc
       WITH TABLE KEY devc = s_devc-devc.
  IF sy-subrc &lt;&gt; 0.

    CALL METHOD cl_package=&gt;if_package~load_package
      EXPORTING
        i_package_name             = devclass
        i_force_reload             = &apos;X&apos;
      IMPORTING
        e_package                  = o_pack
      EXCEPTIONS
        object_not_existing        = 1
        unexpected_error           = 2
        intern_err                 = 3
        object_locked_and_modified = 4
        OTHERS                     = 5.
    IF sy-subrc &lt;&gt; 0.
    ENDIF.

    IF o_pack-&gt;super_package_name IS INITIAL.
      s_devc-path = devclass.
    ELSE.
      s_devc-path = get_devc_path( directory = directory
                                    devclass = o_pack-&gt;super_package_name ).
      d_dir = devclass.
      s_devc-path = concatenate_path( directory = s_devc-path
                                       filename = d_dir ).
    ENDIF.
    INSERT s_devc INTO TABLE t_devc.
    d_dir = concatenate_path( directory = directory
                               filename = s_devc-path ).
    CALL METHOD cl_gui_frontend_services=&gt;directory_create
      EXPORTING
        directory                = d_dir
      CHANGING
        rc                       = rc
      EXCEPTIONS
        directory_create_failed  = 1
        cntl_error               = 2
        error_no_gui             = 3
        directory_access_denied  = 4
        directory_already_exists = 0
        path_not_found           = 6
        unknown_error            = 7
        not_supported_by_gui     = 8
        wrong_parameter          = 9
        OTHERS                   = 10.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDIF.
  result = s_devc-path.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="RAW_2_XML" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="5 ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Convert RAW to XML"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="O_RAW" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_RAW">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="RAW component with data"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_XML"/>
    </PARAMETERS>
    <SOURCE>
  DATA ez_xml          TYPE to_ez_xml.
  DATA o_xml           TYPE to_xml.

  CHECK o_raw IS BOUND.

  TRY.
    CREATE OBJECT ez_xml.
    o_xml = ez_xml-&gt;any2xml( any       = o_raw
                             type      = comp_nodename ).
* control content
  ENDTRY.

  result = o_xml.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SAVE_FILE" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Save raw data to file (in XML)"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="FILENAME" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_FILENAME"/>
     <ITEM SCONAME="O_RAW" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_RAW">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="RAW component with data"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>
  DATA o_xml           TYPE to_xml.
  DATA _tempstring     TYPE string.
  DATA o_file          TYPE to_file.
  DATA o_file_raw      TYPE to_raw_base.
  DATA root_node       TYPE REF TO if_ixml_node.
  DATA d_name          TYPE td_compname.
  DATA d_type          TYPE td_comptype.
  DATA d_msg           TYPE string.

  CHECK o_raw IS BOUND.

* Load file if exist
  CREATE OBJECT o_file.
  o_file-&gt;set_filename( filename ).
  o_file-&gt;set_filetype( zaplink_file=&gt;c_ft_local ).
  TRY.
      o_file-&gt;load( ).
      _tempstring = o_file-&gt;get_filecontent( ).
    CATCH zaplink_cx_file.
      CLEAR _tempstring.
  ENDTRY.

  d_name = o_raw-&gt;get_name( ).    &quot; Issue 32
  d_type = o_raw-&gt;get_type( ).    &quot; Issue 32
  IF NOT _tempstring IS INITIAL.  &quot; file allready exists =&gt; check checksum
    o_xml = string_2_xml( _tempstring ).

    IF o_xml IS BOUND.

      root_node = o_xml-&gt;get_root_element( ).
*        IF NOT root_node IS BOUND.
*          _name = &apos;$NONE$&apos;(001).
*          RAISE EXCEPTION TYPE zaplink_cx_connector EXPORTING
*                textid = zaplink_cx_connector=&gt;invalid_xml
*             node_name = _name.
*        ENDIF.
*
*        _name = root_node-&gt;get_name( ).
*        IF _name &lt;&gt; comp_nodename.
*          RAISE EXCEPTION TYPE zaplink_cx_connector EXPORTING
*                textid = zaplink_cx_connector=&gt;invalid_xml
*             node_name = _name.
*        ENDIF.

      TRY.
          o_file_raw = zaplink_connectors=&gt;node_2_raw( root_node ).
        CATCH zaplink_cx_connector INTO o_mycx.
          RAISE EXCEPTION o_mycx.
      ENDTRY.
      CLEAR o_xml.
      o_raw-&gt;set_checksum( ).
      IF o_raw-&gt;get_checksum( ) = o_file_raw-&gt;get_checksum( ). &quot; no change =&gt; skip file
* No change detected on (&amp;1) &amp;2 comparing with file &amp;3
        MESSAGE w000 WITH d_type d_name filename INTO d_msg.
        WRITE:/ icon_yellow_light AS ICON, d_msg.
        EXIT.
      ELSE.
        o_xml = raw_2_xml( o_raw ).
      ENDIF.
    ENDIF.
  ENDIF.

* Either file do not exists or had to be overwrited
  IF NOT o_xml IS BOUND.
    o_raw-&gt;set_checksum( ).
    o_xml = raw_2_xml( o_raw ).
  ENDIF.

  CHECK o_xml IS BOUND.

  _tempstring = xml_2_string( o_xml ).

  TRY.
      o_file-&gt;set_filecontent( _tempstring ).
      o_file-&gt;save( ).
* (&amp;1) &amp;2 : Change detected - Extracted to file &amp;3
      MESSAGE s001 WITH d_type d_name filename INTO d_msg.
      WRITE:/ icon_green_light AS ICON, d_msg.
    CATCH zaplink_cx_file.
* (&amp;1) &amp;2 : Change detected - Failed to save to file &amp;3
      MESSAGE e005 WITH d_type d_name filename INTO d_msg.
      WRITE:/ icon_red_light AS ICON, d_msg.
      RETURN.
  ENDTRY.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="STRING_2_XML" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="7 ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Convert string to XML Document"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="STRING">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="RAW component with data"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="TO_XML"/>
    </PARAMETERS>
    <SOURCE>
  DATA o_streamfactory  TYPE REF TO if_ixml_stream_factory.
  DATA o_stream         TYPE REF TO if_ixml_istream.
  DATA o_parser         TYPE REF TO if_ixml_parser.
  DATA _tempstring      TYPE string.
  DATA _rc              TYPE sysubrc.
  data o_doc            type to_xml.

  CHECK NOT data IS INITIAL.

  TRY.
      o_streamfactory = xmlengine-&gt;create_stream_factory( ).
      o_doc = xmlengine-&gt;create_document( ).
      o_stream = o_streamfactory-&gt;create_istream_string( data ).
      o_parser = xmlengine-&gt;create_parser(  stream_factory = o_streamfactory
                                           istream        = o_stream
                                           document       = o_doc ).
      o_parser-&gt;parse( ).
    CATCH cx_root.
  ENDTRY.

  IF o_doc IS BOUND.
    result = o_doc.
  ENDIF.
</SOURCE>
   </ITEM>
   <ITEM CMPNAME="XML_2_STRING" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="6 ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Convert XML to string"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="O_XML" VERSION="1" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_XML">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="RAW component with data"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" VERSION="1" CMPTYPE="1" EDITORDER="2 " PARDECLTYP="3" TYPTYPE="1" TYPE="STRING"/>
    </PARAMETERS>
    <SOURCE>
  DATA _streamfactory  TYPE REF TO if_ixml_stream_factory.
  DATA _outputstream   TYPE REF TO if_ixml_ostream.
  DATA _renderer       TYPE REF TO if_ixml_renderer.
  DATA _tempstring     TYPE string.
  DATA _printxmldoc    TYPE REF TO cl_xml_document.
  DATA _rc             TYPE sysubrc.

  check o_xml IS BOUND.

  _streamfactory = xmlengine-&gt;create_stream_factory( ).
  _outputstream = _streamfactory-&gt;create_ostream_cstring( _tempstring ).
  _renderer = xmlengine-&gt;create_renderer( document = o_xml
                                           ostream = _outputstream ).
  _renderer-&gt;set_normalizing( ).
  _rc = _renderer-&gt;render( ).
  CREATE OBJECT _printxmldoc.
  _rc = _printxmldoc-&gt;parse_string( _tempstring ).

  WHILE _tempstring(1) &lt;&gt; &apos;&lt;&apos;.
    SHIFT _tempstring LEFT BY 1 PLACES.
  ENDWHILE.

  result = _tempstring.</SOURCE>
   </ITEM>
  </METHODS>
  <TYPEGROUPS>
   <ITEM TYPEGROUP="ABAP" VERSION="1" IMPLICIT="X"/>
  </TYPEGROUPS>
  <TYPES>
   <ITEM CMPNAME="TD_DIRECTORYNAME" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="1 " TYPTYPE="1" TYPE="TD_FILENAME">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Client Directory"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TD_PACKAGE" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="2 " TYPTYPE="1" TYPE="DEVCLASS">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Package"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_CONNECTOR" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZAPLINK_CONNECTOR">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPLink Connector interface"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_CONNECTOR_CLEANER" VERSION="1" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="3" TYPE="ZAPLINK_CNX_EXT_CLEANER">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPLink Connector : Cleanning interface"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_EZ_XML" VERSION="1" EXPOSURE="2" STATE="1" EDITORDER="3 " TYPTYPE="3" TYPE="ZAPLINK_EASYXML">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPLink Easy XML Tools"/>
    </TEXTS>
   </ITEM>
  </TYPES>
 </RAW>
</ZL_OBJECT>
