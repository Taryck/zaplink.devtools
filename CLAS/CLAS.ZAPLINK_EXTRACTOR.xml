<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="E53904CF65BA8089948EC5B1A26783CF" CODE_SIGNATURE="8FBAE45E836ED9152AF59110FC2EC8D9" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_EXTRACTOR" TYPE="CLAS" VERSION="1.01">
 <DIRECTORY DEVCLASS="ZAPLINK-DEVTOOLS" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" CLSCCINCL="X" FIXPT="X" UNICODE="X" MSG_ID="ZAPLINK_DEVTOOLS">
   <TEXTS>
    <ITEM LANG="E" TEXT="ZAP Link : Components Extractor">U1&amp;FUNCTIONALITY&amp;
ASTool that allow to extract (export) each ABAP component in a specified
  list of component and to write a XML file for each component. This tool
  is used to keep Google Code repository up to date. This component is not
  part of the basic framework.
U1&amp;RELATIONS&amp;
AS
U1&amp;EXAMPLE&amp;
AS
U1&amp;HINTS&amp;
AS
U1&amp;FURTHER_SOURCES_OF_INF&amp;
AS
U1Memories
ASThis application is dedicated to the memories of :
B2My father : Lamri BENSIALI (1940-2004) without whom I never started
  programming
B2My uncle : Jacky BEDU (1934-2009) who died during the completion of this
  application</ITEM>
   </TEXTS>
  </A0_MAINDATA>
  <ALIASES>
   <ITEM CMPNAME="ACTIONS" EXPOSURE="1" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="ACTIONS"/>
   <ITEM CMPNAME="BALLOG_OBJECT" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="BALLOG_OBJECT"/>
   <ITEM CMPNAME="COMP_NODENAME" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="COMP_NODENAME"/>
   <ITEM CMPNAME="EXISTS" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="EXISTS"/>
   <ITEM CMPNAME="EXT_SEP" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="EXT_SEP"/>
   <ITEM CMPNAME="FILE_EXT" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="FILE_EXT"/>
   <ITEM CMPNAME="LINE_SEPARATOR" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="LINE_SEPARATOR"/>
   <ITEM CMPNAME="TD_ABAPSOURCE" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_ABAPSOURCE"/>
   <ITEM CMPNAME="TD_CHECKSUM" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CHECKSUM"/>
   <ITEM CMPNAME="TD_CLASSNAME" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CLASSNAME"/>
   <ITEM CMPNAME="TD_COMPEXISTS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_COMPEXISTS"/>
   <ITEM CMPNAME="TD_COMPNAME" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_COMPNAME"/>
   <ITEM CMPNAME="TD_COMPTEXT" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_COMPTEXT"/>
   <ITEM CMPNAME="TD_COMPTYPE" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_COMPTYPE"/>
   <ITEM CMPNAME="TD_CONNCLASS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONNCLASS"/>
   <ITEM CMPNAME="TD_CONNEXISTS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONNEXISTS"/>
   <ITEM CMPNAME="TD_CONNUUID" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONNUUID"/>
   <ITEM CMPNAME="TD_CONNVER" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONNVER"/>
   <ITEM CMPNAME="TD_CONTNAME" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONTNAME"/>
   <ITEM CMPNAME="TD_CONTVER" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_CONTVER"/>
   <ITEM CMPNAME="TD_DEVCLASS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_DEVCLASS"/>
   <ITEM CMPNAME="TD_DOC_ID" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_DOC_ID"/>
   <ITEM CMPNAME="TD_EXISTS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_EXISTS"/>
   <ITEM CMPNAME="TD_FILENAME" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_FILENAME"/>
   <ITEM CMPNAME="TD_FILETYPE" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_FILETYPE"/>
   <ITEM CMPNAME="TD_LANG" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_LANG"/>
   <ITEM CMPNAME="TD_LIGHT" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_LIGHT"/>
   <ITEM CMPNAME="TD_OBJ_TYPE" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_OBJ_TYPE"/>
   <ITEM CMPNAME="TD_ORDERKIND" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_ORDERKIND"/>
   <ITEM CMPNAME="TD_PROGNAME" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_PROGNAME"/>
   <ITEM CMPNAME="TD_SUBSTITUTIONKIND" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_SUBSTITUTIONKIND"/>
   <ITEM CMPNAME="TD_TRANSPORT_REQUEST" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TRANSPORT_REQUEST"/>
   <ITEM CMPNAME="TD_TXTP_ID" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TXTP_ID"/>
   <ITEM CMPNAME="TD_TXTP_KIND" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TXTP_KIND"/>
   <ITEM CMPNAME="TD_TXTP_LEN" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TXTP_LEN"/>
   <ITEM CMPNAME="TD_TXTP_TEXT" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TXTP_TEXT"/>
   <ITEM CMPNAME="TD_TYPEORDER" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TYPEORDER"/>
   <ITEM CMPNAME="TD_TYPE_AS_TEXT" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TD_TYPE_AS_TEXT"/>
   <ITEM CMPNAME="TEXTPOOL_KINDS" EXPOSURE="2" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TEXTPOOL_KINDS"/>
   <ITEM CMPNAME="TO_COMPONENT" EXPOSURE="1" CMPTYPE="3" REFCLSNAME="ZAPLINK_KERNEL_TYPES" REFCMPNAME="TO_COMPONENT"/>
   <ITEM CMPNAME="TO_CONTAINER" EXPOSURE="1" CMPTYPE="3" REFCLSNAME="ZAPLINK_KERNEL_TYPES" REFCMPNAME="TO_CONTAINER"/>
   <ITEM CMPNAME="TO_FILE" EXPOSURE="1" CMPTYPE="3" REFCLSNAME="ZAPLINK_KERNEL_TYPES" REFCMPNAME="TO_FILE"/>
   <ITEM CMPNAME="TO_LIST" EXPOSURE="1" CMPTYPE="3" REFCLSNAME="ZAPLINK_KERNEL_TYPES" REFCMPNAME="TO_LIST"/>
   <ITEM CMPNAME="TO_MSG_COLL" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_KERNEL_TYPES" REFCMPNAME="TO_MSG_COLL"/>
   <ITEM CMPNAME="TO_OPTIONS" EXPOSURE="1" CMPTYPE="3" REFCLSNAME="ZAPLINK_KERNEL_TYPES" REFCMPNAME="TO_OPTIONS"/>
   <ITEM CMPNAME="TO_OPT_DEVCLASS" EXPOSURE="1" CMPTYPE="3" REFCLSNAME="ZAPLINK_KERNEL_TYPES" REFCMPNAME="TO_OPT_DEVCLASS"/>
   <ITEM CMPNAME="TO_OPT_DIRECTORY" EXPOSURE="1" CMPTYPE="3" REFCLSNAME="ZAPLINK_KERNEL_TYPES" REFCMPNAME="TO_OPT_DIRECTORY"/>
   <ITEM CMPNAME="TO_OPT_TRANSPORT_REQUEST" EXPOSURE="1" CMPTYPE="3" REFCLSNAME="ZAPLINK_KERNEL_TYPES" REFCMPNAME="TO_OPT_TRANSPORT_REQUEST"/>
   <ITEM CMPNAME="TO_RAW" EXPOSURE="1" CMPTYPE="3" REFCLSNAME="ZAPLINK_KERNEL_TYPES" REFCMPNAME="TO_RAW"/>
   <ITEM CMPNAME="TO_RAW_BASE" EXPOSURE="1" CMPTYPE="3" REFCLSNAME="ZAPLINK_KERNEL_TYPES" REFCMPNAME="TO_RAW_BASE"/>
   <ITEM CMPNAME="TO_XML" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TO_XML"/>
   <ITEM CMPNAME="TR_AUTHOR" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_AUTHOR"/>
   <ITEM CMPNAME="TR_COMPNAME" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_COMPNAME"/>
   <ITEM CMPNAME="TR_COMPTYPE" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_COMPTYPE"/>
   <ITEM CMPNAME="TR_DLVUNIT" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_DLVUNIT"/>
   <ITEM CMPNAME="TR_DOCID" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_DOCID"/>
   <ITEM CMPNAME="TR_PACKAGES" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_PACKAGES"/>
   <ITEM CMPNAME="TR_SRCSYSTEM" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_SRCSYSTEM"/>
   <ITEM CMPNAME="TR_TR" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TR_TR"/>
   <ITEM CMPNAME="TS_BASE_ATTRIBUTS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_BASE_ATTRIBUTS"/>
   <ITEM CMPNAME="TS_COMPKEY" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_COMPKEY"/>
   <ITEM CMPNAME="TS_COMPONENT" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_COMPONENT"/>
   <ITEM CMPNAME="TS_CONNDATA" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_CONNDATA"/>
   <ITEM CMPNAME="TS_CONN_CLASS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_CONN_CLASS"/>
   <ITEM CMPNAME="TS_CONN_DEF" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_CONN_DEF"/>
   <ITEM CMPNAME="TS_CONTDATA" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_CONTDATA"/>
   <ITEM CMPNAME="TS_DIRECTORY" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_DIRECTORY"/>
   <ITEM CMPNAME="TS_DOC" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_DOC"/>
   <ITEM CMPNAME="TS_HEAD" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_HEAD"/>
   <ITEM CMPNAME="TS_LANG" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_LANG"/>
   <ITEM CMPNAME="TS_TXTP_TEXT" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_TXTP_TEXT"/>
   <ITEM CMPNAME="TS_TXTP_TEXTPOOL" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_TXTP_TEXTPOOL"/>
   <ITEM CMPNAME="TS_TYPE" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TS_TYPE"/>
   <ITEM CMPNAME="TT_ABAPRAWSOURCE" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_ABAPRAWSOURCE"/>
   <ITEM CMPNAME="TT_COMPKEYS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_COMPKEYS"/>
   <ITEM CMPNAME="TT_CONN_CLASSES" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_CONN_CLASSES"/>
   <ITEM CMPNAME="TT_DOCS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_DOCS"/>
   <ITEM CMPNAME="TT_RAWTEXT" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_RAWTEXT"/>
   <ITEM CMPNAME="TT_TXTP_TEXTPOOLS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_TXTP_TEXTPOOLS"/>
   <ITEM CMPNAME="TT_TXTP_TEXTS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_TXTP_TEXTS"/>
   <ITEM CMPNAME="TT_TYPES" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="ZAPLINK_DATATYPES" REFCMPNAME="TT_TYPES"/>
  </ALIASES>
  <ATTRIBUTS>
   <ITEM CMPNAME="APPLICATION_LOG" EXPOSURE="2" STATE="1" TYPTYPE="1" TYPE="TO_MSG_COLL">
    <TEXTS>
     <ITEM LANG="E" TEXT="Message Collector: Standard Implementation"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="BALLOG_SUBOBJECT" EXPOSURE="2" STATE="1" ATTDECLTYP="2" ATTVALUE="&apos;EXTRACTOR&apos;" TYPTYPE="1" TYPE="BALSUBOBJ">
    <TEXTS>
     <ITEM LANG="E" TEXT="Application Log: Subobject"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="DIRHIERACHIES" EXPOSURE="2" STATE="1" ATTDECLTYP="2" TYPTYPE="4">begin of dirhierachies,
       type type td_dirhierarchy value &apos;T&apos;,  &quot;#EC NOTEXT
       devc type td_dirhierarchy value &apos;D&apos;,  &quot;#EC NOTEXT
     end of dirhierachies
`</ITEM>
   <ITEM CMPNAME="FILE_SEP" EXPOSURE="2" STATE="1" ATTDECLTYP="1" ATTRDONLY="X" TYPTYPE="1" TYPE="C">
    <TEXTS>
     <ITEM LANG="E" TEXT="File/directory Separator"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="O_CX" EXPOSURE="2" STATE="1" TYPTYPE="3" TYPE="ZAPLINK_CX">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZAPlink Framework : Root exception class"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="O_MYCX" EXPOSURE="2" STATE="1" TYPTYPE="3" TYPE="ZAPLINK_CX">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZAPlink Framework : Root exception class"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="WORKING_LIST" EXPOSURE="1" STATE="1" TYPTYPE="1" TYPE="TO_LIST"/>
   <ITEM CMPNAME="XMLENGINE" EXPOSURE="1" STATE="1" ATTDECLTYP="1" TYPTYPE="3" TYPE="IF_IXML">
    <TEXTS>
     <ITEM LANG="E" TEXT="XML Engine"/>
    </TEXTS>
   </ITEM>
  </ATTRIBUTS>
  <INTERFACES>
   <ITEM REFCLSNAME="ZAPLINK_DATATYPES" EXPOSURE="2" STATE="1" RELTYPE="1"/>
   <ITEM REFCLSNAME="ZAPLINK_KERNEL_TYPES" EXPOSURE="2" STATE="1" RELTYPE="1"/>
  </INTERFACES>
  <LOCAL>
   <TYPES>`
*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</TYPES>
   <IMPLEMENTATIONS>`
*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes
CLASS lcl_data DEFINITION
  CREATE PUBLIC
  FRIENDS zaplink_extractor
  .

  PUBLIC SECTION.
    INTERFACES zaplink_datatypes.       &quot; OK Used by parent
    ALIASES td_filename FOR zaplink_datatypes~td_filename.
    ALIASES td_checksum FOR zaplink_datatypes~td_checksum.
    ALIASES to_xml      FOR zaplink_datatypes~to_xml.
    ALIASES td_comptype FOR zaplink_datatypes~td_comptype.
    ALIASES td_compname FOR zaplink_datatypes~td_compname.
    ALIASES td_devclass FOR zaplink_datatypes~td_devclass.

    INTERFACES zaplink_kernel_types.    &quot; OK Used by parent
    ALIASES to_file     FOR zaplink_kernel_types~to_file.
    ALIASES to_raw      FOR zaplink_kernel_types~to_raw.
    ALIASES to_raw_base FOR zaplink_kernel_types~to_raw_base.

    TYPES:
      BEGIN OF ts_key,        &quot; TYPE zaplink_directory=&gt;ts_key.
        type  TYPE  trobjtype,
        name  TYPE  sobj_name,
      END OF  ts_key.
    TYPES:
      BEGIN OF ts_data,       &quot; TYPE zaplink_directory=&gt;ts_data.
        checksum  TYPE  guid_32,
        signature TYPE  guid_32,
*        content   TYPE  xstring,
      END OF ts_data.

    DATA type        TYPE td_comptype.
    DATA name        TYPE td_compname.
    DATA package     TYPE td_devclass.
    DATA o_raw       TYPE to_raw.
    DATA o_file      TYPE to_file.
    DATA o_raw_base  TYPE to_raw_base.
    DATA filename    TYPE td_filename.
    DATA checksum    TYPE td_checksum.
    DATA signature   TYPE td_checksum.
    DATA o_xml       TYPE to_xml.
    METHODS join
      IMPORTING
        value(data) TYPE REF TO lcl_data.
    METHODS get_key
      RETURNING
        value(result) TYPE ts_key.
    METHODS get_file_data
      RETURNING
        value(result) TYPE ts_data.
    METHODS get_sap_data
      RETURNING
        value(result) TYPE ts_data.
  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS.                    &quot;lcl_data  DEFINITIO
*----------------------------------------------------------------------*
*       CLASS lcl_data IMPLEMENTATION
*----------------------------------------------------------------------*
*
*----------------------------------------------------------------------*
CLASS lcl_data IMPLEMENTATION.
  METHOD join.
    DEFINE lmac_join.
      if me-&gt;&amp;1 is initial.   me-&gt;&amp;1 = data-&gt;&amp;1.    endif.
    END-OF-DEFINITION.
    lmac_join: o_xml, o_raw_base, o_raw, filename, checksum, type, name, package, checksum, signature.
  ENDMETHOD.                    &quot;Join
  METHOD get_key.
    result-type = type.
    result-name = name.
  ENDMETHOD.                    &quot;get_key
  METHOD get_file_data.
    DATA xml_str TYPE string.
    CHECK o_raw_base IS BOUND.
    result-checksum = o_raw_base-&gt;get_checksum( ).
    result-signature = o_raw_base-&gt;get_code_signature( ).
*    IF o_file IS BOUND.
*      xml_str = o_file-&gt;get_filecontent( ).
*    ELSE.
*      xml_str = zaplink_connectors=&gt;raw_2_string( o_raw_base ).
*    ENDIF.
*    result-content = zaplink_tools=&gt;zip_string( xml_str ).
  ENDMETHOD.                    &quot;get_file_data
  METHOD get_sap_data.
    DATA xml_str TYPE string.
    CHECK o_raw IS BOUND.
    result-checksum = o_raw-&gt;get_checksum( ).
    result-signature = o_raw-&gt;get_code_signature( ).
*    xml_str = zaplink_connectors=&gt;raw_2_string( o_raw ).
*    result-content = zaplink_tools=&gt;zip_string( xml_str ).
  ENDMETHOD.                    &quot;get_sap_data
ENDCLASS.                    &quot;lcl_data IMPLEMENTATION</IMPLEMENTATIONS>
   <MACROS>`
*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class

INCLUDE zaplink_macros.

DEFINE lmac_create_data.
  create object &amp;1.
  &amp;1-&gt;o_file = &amp;2-o_file.
  &amp;1-&gt;o_xml = &amp;2-o_xml.
  &amp;1-&gt;o_raw_base = &amp;2-o_raw_base.
  &amp;1-&gt;o_raw = &amp;2-o_raw.
  &amp;1-&gt;filename = &amp;2-filename.
*  &amp;1-&gt;checksum = &amp;2-checksum.
  if &amp;2-o_raw_base is bound.
    &amp;1-&gt;type = &amp;2-o_raw_base-&gt;get_type( ).
    &amp;1-&gt;name = &amp;2-o_raw_base-&gt;get_name( ).
    &amp;1-&gt;package = &amp;2-o_raw_base-&gt;directory-devclass.
    &amp;1-&gt;checksum = &amp;2-o_raw_base-&gt;get_checksum( ).
    &amp;1-&gt;signature = &amp;2-o_raw_base-&gt;get_code_signature( ).
  elseif &amp;2-o_raw is bound.
    &amp;1-&gt;type = &amp;2-o_raw-&gt;get_type( ).
    &amp;1-&gt;name = &amp;2-o_raw-&gt;get_name( ).
    &amp;1-&gt;package = &amp;2-o_raw-&gt;directory-devclass.
    &amp;1-&gt;checksum = &amp;2-o_raw-&gt;get_checksum( ).
    &amp;1-&gt;signature = &amp;2-o_raw-&gt;get_code_signature( ).
  endif.
END-OF-DEFINITION.</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="ANALYSE" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Analyse components"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="AUTHOR" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TR_AUTHOR"/>
     <ITEM SCONAME="EXT" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL"/>
     <ITEM SCONAME="HIERARCHY" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DIRHIERARCHY">
      <TEXTS>
       <ITEM LANG="E" TEXT="Directory Hierarchy types"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="NAME" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TR_COMPNAME"/>
     <ITEM SCONAME="PACKAGES" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TR_PACKAGES"/>
     <ITEM SCONAME="SRCSYSTEM" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TR_SRCSYSTEM">
      <TEXTS>
       <ITEM LANG="E" TEXT="Package"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="TARGET_DIR" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DIRECTORYNAME">
      <TEXTS>
       <ITEM LANG="E" TEXT="Client Directory"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="TYPE" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TR_COMPTYPE"/>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX" LANGU="E">
      <TEXTS>
       <ITEM LANG="E" TEXT="ZAPlink Framework : Root exception class"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DATA filename    TYPE td_filename.
  DATA t_keys      TYPE tt_compkeys.
  DATA o_tmp_list  TYPE to_list.
  DATA o_comp      TYPE to_component.
  DATA o_comp_n    TYPE to_component.
  DATA o_conn      TYPE to_connector.
  DATA o_cnx_clean TYPE to_connector_cleaner.
  DATA _comp       TYPE ts_component.
  DATA o_raw       TYPE REF TO zaplink_raw.
  DATA d_checksum  TYPE td_checksum.
  DATA d_code_sign TYPE td_checksum.
  DATA s_my_file   TYPE ts_my_file.
  DATA _cx_list    TYPE REF TO zaplink_cx_list.
  DATA _cx_cnx     TYPE REF TO zaplink_cx_connector.
  DATA _cx_comp    TYPE REF TO zaplink_cx_component.
  DATA o_data      TYPE REF TO lcl_data.

  t_keys = zaplink_tools=&gt;get_keys_from_tadir( srcsystem = srcsystem
                                                   type  = type
                                                    name = name
                                                packages = packages
                                                     ext = ext
                                                  author = author ).
  CHECK NOT t_keys IS INITIAL.
  TRY.
*      CREATE OBJECT working_list.    &quot; Issue 115
      working_list-&gt;clear( ).         &quot; Issue 115
      working_list-&gt;add_keys( t_keys ).
      working_list-&gt;select_default( zaplink_list=&gt;sel_actions-export ).
      working_list-&gt;reverse_selection( ).
      o_tmp_list = working_list-&gt;selection_as_list( ).
      working_list-&gt;remove_list( o_tmp_list ).

* Initialize Interator
      working_list-&gt;order_kind = zaplink_list=&gt;order_kinds-no_order.
      working_list-&gt;init_iter( ).
      working_list-&gt;display_progress = abap_true.
      o_comp_n = working_list-&gt;get_next( ).

      WHILE o_comp_n IS BOUND.
        o_comp = o_comp_n.    o_comp_n = working_list-&gt;get_next( ).
        TRY.
            o_comp-&gt;set_with_subcomp( abap_false ).
            _comp = o_comp-&gt;get_key( ).   o_conn = o_comp-&gt;connector( ).
* Extract Component
            o_raw = o_conn-&gt;read_from_sap( o_comp ).
            TRY.
                CLEAR o_cnx_clean.
                o_cnx_clean ?= o_conn.
                o_cnx_clean-&gt;anonymize( o_raw ).
              CATCH cx_root.
            ENDTRY.
*            o_raw-&gt;set_checksum( ).      &quot; no longer needed done in Anonymize
            filename = create_fullpath( directory = target_dir
                                        hierarchy = hierarchy
                                             comp = o_comp ).
            s_my_file = load_file( filename ).
            s_my_file-o_raw = o_raw.
            lmac_create_data o_data s_my_file.
            o_comp-&gt;set_add_object( o_data ).
*            o_comp-&gt;set_checksum( o_data-&gt;checksum ).   o_comp-&gt;set_code_signature( o_data-&gt;signature ).
            d_checksum =  o_raw-&gt;get_checksum( ).           o_comp-&gt;set_checksum( d_checksum ).
            d_code_sign =  o_raw-&gt;get_code_signature( ).    o_comp-&gt;set_code_signature( d_code_sign ).
            IF d_checksum = s_my_file-checksum.   o_comp-&gt;set_action( zaplink_list=&gt;sel_actions-none ).    ENDIF.

          CATCH zaplink_cx_connector INTO _cx_cnx.
            o_comp-&gt;set_exception( _cx_cnx ).
            TRY.
                o_comp-&gt;set_msg_coll( o_conn-&gt;application_log ).
              CATCH cx_root.
            ENDTRY.
          CATCH zaplink_cx_component INTO _cx_comp.
            CREATE OBJECT _cx_cnx
              EXPORTING
                textid   = zaplink_cx_container=&gt;add_failed
                previous = _cx_comp.
            _cx_cnx-&gt;update( ).
            o_comp-&gt;set_exception( _cx_cnx ).
* Failed to add component &apos;&amp;NAME&amp;&apos; (&amp;TYPE&amp;). Look at exception &amp; message collector in component to get the root cause.
            RAISE EXCEPTION TYPE zaplink_cx_container
                       EXPORTING textid = zaplink_cx_container=&gt;add_comp_failed
                                   type = _comp-type
                                   name = _comp-name.
        ENDTRY.
      ENDWHILE.
    CATCH zaplink_cx_list INTO _cx_list.
* Failed to components list. Due to exception &apos;&amp;CX_NAME&amp;&apos;.
      CREATE OBJECT o_mycx
        EXPORTING
          textid   = zaplink_cx_component=&gt;invalid_exception
          previous = _cx_list.
      o_mycx-&gt;update( ).
      RAISE EXCEPTION o_mycx.
  ENDTRY.

  working_list-&gt;select_by_action( ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CLASS_CONSTRUCTOR" EXPOSURE="2" STATE="1" MTDTYPE="2" MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="CLASS_CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>`
  xmlengine = cl_ixml=&gt;create( ).

  CALL METHOD cl_gui_frontend_services=&gt;get_file_separator
    CHANGING
      file_separator       = file_sep
    EXCEPTIONS
      cntl_error           = 1
      error_no_gui         = 2
      not_supported_by_gui = 3
      OTHERS               = 4.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
               WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CONCATENATE_PATH" EXPOSURE="1" STATE="1" MTDDECLTYP="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Generate file path from directory and filename"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DIRECTORY" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DIRECTORYNAME">
      <TEXTS>
       <ITEM LANG="E" TEXT="Client Directory"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="FILENAME" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_FILENAME"/>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_FILENAME"/>
    </PARAMETERS>
    <SOURCE>`
  DATA len TYPE i.

  IF directory IS INITIAL.    result = filename.    RETURN.   ENDIF.
  len = STRLEN( directory ) - 1.
  IF directory+len(1) &lt;&gt; file_sep.
    CONCATENATE directory file_sep filename INTO result.
  ELSE.
    CONCATENATE directory filename INTO result.
  ENDIF.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CONSTRUCTOR" EXPOSURE="2" STATE="1" MTDTYPE="2" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>`
  mac_create_log application_log ballog_subobject space.
  CREATE OBJECT working_list.       &quot; Issue 115</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CREATE_FILENAME" EXPOSURE="1" STATE="1" MTDDECLTYP="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Generate XML filename"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="NAME" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_COMPNAME"/>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_FILENAME"/>
     <ITEM SCONAME="TYPE" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_COMPTYPE"/>
    </PARAMETERS>
    <SOURCE>`
  CONCATENATE type ext_sep name ext_sep file_ext INTO result.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CREATE_FULLPATH" EXPOSURE="1" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Generate XML full file path based on tree type"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMP" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT"/>
     <ITEM SCONAME="DIRECTORY" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DIRECTORYNAME">
      <TEXTS>
       <ITEM LANG="E" TEXT="Client Directory"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="HIERARCHY" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DIRHIERARCHY">
      <TEXTS>
       <ITEM LANG="E" TEXT="Directory Hierarchy"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_FILENAME"/>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX" LANGU="E">
      <TEXTS>
       <ITEM LANG="E" TEXT="ZAPlink Framework : Root exception class"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  CASE hierarchy.
    WHEN dirhierachies-type.
      result = create_fullpath_by_type( directory = directory
                                        comp      = comp ).
    WHEN dirhierachies-devc.
      result = create_fullpath_by_devc( directory = directory
                                        comp      = comp ).
  ENDCASE.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CREATE_FULLPATH_BY_DEVC" EXPOSURE="1" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Generate XML full file path based on devlopment classes"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMP" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT"/>
     <ITEM SCONAME="DIRECTORY" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DIRECTORYNAME">
      <TEXTS>
       <ITEM LANG="E" TEXT="Client Directory"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_FILENAME"/>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX" LANGU="E">
      <TEXTS>
       <ITEM LANG="E" TEXT="ZAPlink Framework : Root exception class"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DATA filename    TYPE td_filename.
  DATA _comp       TYPE ts_component.
  DATA d_devc      TYPE td_devclass.
  DATA _directory  TYPE td_directoryname.
  DATA rc          TYPE sy-subrc.
  DATA len TYPE i.

  CHECK comp IS BOUND.

  d_devc = comp-&gt;get_devclass( ).
  _comp = comp-&gt;get_key( ).
  filename = create_filename( type = _comp-type
                              name = _comp-name ).
  _directory = get_devc_path( directory = directory
                               devclass = d_devc ).
  _directory = concatenate_path( directory = directory
                                  filename = _directory ).

  CALL METHOD cl_gui_frontend_services=&gt;directory_create
    EXPORTING
      directory                = _directory
    CHANGING
      rc                       = rc
    EXCEPTIONS
      cntl_error               = 1
      directory_access_denied  = 2
      directory_already_exists = 0
      directory_create_failed  = 4
      error_no_gui             = 5
      not_supported_by_gui     = 6
      path_not_found           = 7
      unknown_error            = 8
      wrong_parameter          = 9
      OTHERS                   = 10.
  IF sy-subrc &lt;&gt; 0.
    mac_raise_obj_meth_by_name &apos;cl_gui_frontend_services&apos; &apos;directory_create&apos; sy-subrc.
  ENDIF.

  result = concatenate_path( directory = _directory
                              filename = filename ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CREATE_FULLPATH_BY_TYPE" EXPOSURE="1" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Generate XML full file path based on component type"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="COMP" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TO_COMPONENT"/>
     <ITEM SCONAME="DIRECTORY" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DIRECTORYNAME">
      <TEXTS>
       <ITEM LANG="E" TEXT="Client Directory"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_FILENAME"/>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX" LANGU="E">
      <TEXTS>
       <ITEM LANG="E" TEXT="ZAPlink Framework : Root exception class"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DATA _comp       TYPE ts_component.
  DATA filename    TYPE td_filename.
  DATA _directory  TYPE td_directoryname.
  DATA rc          TYPE sy-subrc.

  CHECK comp IS BOUND.

  _comp = comp-&gt;get_key( ).
  filename = _comp-type.
  _directory = concatenate_path( directory = directory
                                  filename = filename ).

  CALL METHOD cl_gui_frontend_services=&gt;directory_create
    EXPORTING
      directory                = _directory
    CHANGING
      rc                       = rc
    EXCEPTIONS
      cntl_error               = 1
      directory_access_denied  = 2
      directory_already_exists = 0
      directory_create_failed  = 4
      error_no_gui             = 5
      not_supported_by_gui     = 6
      path_not_found           = 7
      unknown_error            = 8
      wrong_parameter          = 9
      OTHERS                   = 10.
  IF sy-subrc &lt;&gt; 0.
    mac_raise_obj_meth_by_name &apos;cl_gui_frontend_services&apos; &apos;directory_create&apos; sy-subrc.
  ENDIF.

  filename = create_filename( type = _comp-type
                              name = _comp-name ).
  result = concatenate_path( directory = _directory
                              filename = filename ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="EXTRACT" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Extrac all package components by types"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="AUTHOR" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TR_AUTHOR"/>
     <ITEM SCONAME="EXT" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL"/>
     <ITEM SCONAME="HIERARCHY" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DIRHIERARCHY">
      <TEXTS>
       <ITEM LANG="E" TEXT="Directory Hierarchy types"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="NAME" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TR_COMPNAME"/>
     <ITEM SCONAME="PACKAGES" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TR_PACKAGES"/>
     <ITEM SCONAME="SRCSYSTEM" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TR_SRCSYSTEM">
      <TEXTS>
       <ITEM LANG="E" TEXT="Package"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="TARGET_DIR" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DIRECTORYNAME">
      <TEXTS>
       <ITEM LANG="E" TEXT="Client Directory"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="TYPE" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TR_COMPTYPE"/>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX" LANGU="E">
      <TEXTS>
       <ITEM LANG="E" TEXT="ZAPlink Framework : Root exception class"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DATA directory   TYPE string.
  DATA filename    TYPE td_filename.
  DATA t_keys      TYPE tt_compkeys.
  DATA rc          TYPE sy-subrc.
  DATA o_list      TYPE to_list.
  DATA o_comp      TYPE to_component.
  DATA o_comp_n    TYPE to_component.
  DATA o_conn      TYPE to_connector.
  DATA o_cnx_clean TYPE to_connector_cleaner.
  DATA o_raw       TYPE REF TO zaplink_raw.
  DATA _comp       TYPE zaplink_component=&gt;ts_component.
  DATA _cx_cnx     TYPE REF TO zaplink_cx_connector.
  DATA _cx_comp    TYPE REF TO zaplink_cx_component.
  DATA _cx_list    TYPE REF TO zaplink_cx_list.
  DATA o_data      TYPE REF TO lcl_data.

  analyse( target_dir = target_dir
           srcsystem  = srcsystem
           type       = type
           name       = name
           packages   = packages
           ext        = ext
           hierarchy  = hierarchy
           author     = author ).

  CHECK working_list IS BOUND.
  working_list-&gt;change_selection( ).

* Initialize Interator
  TRY.
      working_list-&gt;order_kind = zaplink_list=&gt;order_kinds-no_order.
      working_list-&gt;init_sel_iter( ).
      working_list-&gt;display_progress = abap_true.
      o_comp_n = working_list-&gt;get_next( ).

      WHILE o_comp_n IS BOUND.
        o_comp = o_comp_n.    o_comp_n = working_list-&gt;get_next( ).
        TRY.
            o_conn = o_comp-&gt;connector( ).
            CASE o_comp-&gt;get_action( ).
              WHEN actions-export.
                o_data ?= o_comp-&gt;get_add_object(  ).
                CHECK o_data IS BOUND.
                ASSERT o_data-&gt;o_raw IS BOUND.

                save_file( o_raw = o_data-&gt;o_raw
                        filename = o_data-&gt;filename ).
              WHEN actions-import.
              WHEN actions-uninstall.
              WHEN actions-unreplicable.
              WHEN OTHERS.
            ENDCASE.

          CATCH zaplink_cx_connector INTO _cx_cnx.
            o_comp-&gt;set_exception( _cx_cnx ).
            TRY.
                o_comp-&gt;set_msg_coll( o_conn-&gt;application_log ).
              CATCH cx_root.
            ENDTRY.

          CATCH zaplink_cx_component INTO _cx_comp.
            CREATE OBJECT _cx_cnx
              EXPORTING
                textid   = zaplink_cx_container=&gt;add_failed
                previous = _cx_comp.
            _cx_cnx-&gt;update( ).
            o_comp-&gt;set_exception( _cx_cnx ).
* Failed to add component &apos;&amp;NAME&amp;&apos; (&amp;TYPE&amp;). Look at exception &amp; message collector in component to get the root cause.
            RAISE EXCEPTION TYPE zaplink_cx_container
                       EXPORTING textid = zaplink_cx_container=&gt;add_comp_failed
                                   type = _comp-type
                                   name = _comp-name.
        ENDTRY.
      ENDWHILE.
    CATCH zaplink_cx_list INTO _cx_list.
* Failed to components list. Due to exception &apos;&amp;CX_NAME&amp;&apos;.
      CREATE OBJECT o_mycx
        EXPORTING
          textid   = zaplink_cx_component=&gt;invalid_exception
          previous = _cx_list.
      o_mycx-&gt;update( ).
      RAISE EXCEPTION o_mycx.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="EXTRACT_CONNECTORS" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Extract connectors"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="PACKAGE" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TR_PACKAGES">
      <TEXTS>
       <ITEM LANG="E" TEXT="Package filter"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="TARGET_DIR" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DIRECTORYNAME">
      <TEXTS>
       <ITEM LANG="E" TEXT="Client Directory"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX" LANGU="E">
      <TEXTS>
       <ITEM LANG="E" TEXT="ZAPlink ROOT Exception for Connectors"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DATA o_generator TYPE REF TO zaplink_standalone_generator.
  DATA _cx         TYPE REF TO cx_root.
  DATA directory   TYPE string.
  DATA filename    TYPE td_filename.
  DATA packages    TYPE scompaklis.
  DATA t_keys      TYPE tt_compkeys.
  DATA rc          TYPE sy-subrc.
  DATA o_list      TYPE to_list.
  DATA o_file      TYPE to_file.
  DATA o_cnxlist   TYPE to_list.
  DATA o_contlist  TYPE to_list.
  DATA o_oriclist  TYPE to_list.
  DATA o_cont      TYPE to_container.
  DATA o_comp      TYPE to_component.
  DATA o_cnx       TYPE to_component.
  DATA o_cnxcomp   TYPE to_component.
  DATA o_conn      TYPE to_connector.
  DATA o_cnx_clean TYPE to_connector_cleaner.
  DATA d_classname TYPE zaplink_standalone_generator=&gt;td_name.
  DATA _comp       TYPE zaplink_component=&gt;ts_component.
  DATA _cx_cnx  TYPE REF TO zaplink_cx_connector.
  DATA _cx_comp TYPE REF TO zaplink_cx_component.
  DATA _cx_list TYPE REF TO zaplink_cx_list.
  DATA s_cnxdata   TYPE ts_contdata.
  DATA d_msg       TYPE string.
  DATA d_change    TYPE abap_bool.
  FIELD-SYMBOLS:
    &lt;m&gt; LIKE LINE OF o_generator-&gt;messages,
    &lt;i&gt; LIKE LINE OF o_generator-&gt;includes,
    &lt;c&gt; LIKE LINE OF o_generator-&gt;classes.

  TRY.
    o_list ?= zaplink_connectors_4extractor=&gt;get_connectorlist( ).
    o_list-&gt;select_default( zaplink_list=&gt;sel_actions-export ).

* Initialize Interator
    TRY.
        o_list-&gt;order_kind = zaplink_list=&gt;order_kinds-no_order.
        o_list-&gt;init_sel_iter( ).
        o_list-&gt;display_progress = abap_true.
        o_cnx = o_list-&gt;get_next( ).
      CATCH zaplink_cx_list INTO _cx_list.
* Failed to components list. Due to exception &apos;&amp;CX_NAME&amp;&apos;.
        CREATE OBJECT o_mycx
          EXPORTING
            textid   = zaplink_cx_component=&gt;invalid_exception
            previous = _cx_list.
        o_mycx-&gt;update( ).
        RAISE EXCEPTION o_mycx.
    ENDTRY.

    WHILE o_cnx IS BOUND.
      CREATE OBJECT o_generator.
      o_generator-&gt;packages = package.
      CREATE OBJECT o_cnxlist.
      CREATE OBJECT o_file.

      TRY.
          o_cnx-&gt;set_with_subcomp( abap_false ).
          _comp = o_cnx-&gt;get_key( ).
* Load previous file
          TRY.
              CREATE OBJECT o_conn TYPE (_comp-name).
            CATCH cx_root INTO _cx.
              RAISE EXCEPTION TYPE zaplink_cx_connector
                         EXPORTING textid = zaplink_cx=&gt;system_error
                                 previous = _cx.
          ENDTRY.
          filename = o_conn-&gt;uuid.
          CONCATENATE filename ext_sep o_conn-&gt;version ext_sep file_ext INTO filename.
          filename = concatenate_path( directory = target_dir
                                        filename = filename ).
          o_file-&gt;set_filename( filename ).
          o_file-&gt;set_filetype( zaplink_file=&gt;c_ft_local ).
          CLEAR o_cont.
          IF o_file-&gt;file_exists( ) = abap_true.
            TRY.
                CREATE OBJECT o_cont
                  EXPORTING
                    o_file = o_file.
                o_cont-&gt;load_from_file( ).
                o_oriclist = o_cont-&gt;get_content( ).
              CATCH zaplink_cx_container.
                CLEAR o_cont.
            ENDTRY.
          ENDIF.

* Get connector and dependenties
          d_classname = _comp-name.
          o_generator-&gt;add_object( d_classname ).
          LOOP AT o_generator-&gt;classes ASSIGNING &lt;c&gt;.
            CREATE OBJECT o_cnxcomp.
            o_cnxcomp-&gt;set_type( &apos;CLAS&apos; ).    _comp-name = &lt;c&gt;-name.    o_cnxcomp-&gt;set_name( _comp-name ).
            TRY.
                o_cnxlist-&gt;add( o_cnxcomp ).
              CATCH zaplink_cx INTO o_cx.
                IF o_cx-&gt;is_exception_text( zaplink_cx_list=&gt;already_exists ) IS INITIAL. RAISE EXCEPTION o_cx. ENDIF.
            ENDTRY.
          ENDLOOP.
          LOOP AT o_generator-&gt;includes ASSIGNING &lt;i&gt;.
            CREATE OBJECT o_cnxcomp.
            o_cnxcomp-&gt;set_type( &apos;PROG&apos; ).    _comp-name = &lt;i&gt;.   o_cnxcomp-&gt;set_name( _comp-name ).
            TRY.
                o_cnxlist-&gt;add( o_cnxcomp ).
              CATCH zaplink_cx INTO o_cx.
                IF o_cx-&gt;is_exception_text( zaplink_cx_list=&gt;already_exists ) IS INITIAL. RAISE EXCEPTION o_cx. ENDIF.
            ENDTRY.
          ENDLOOP.
          LOOP AT o_generator-&gt;messages ASSIGNING &lt;m&gt;.
            CREATE OBJECT o_cnxcomp.
            o_cnxcomp-&gt;set_type( &apos;MSAG&apos; ).      _comp-name = &lt;m&gt;-name.      o_cnxcomp-&gt;set_name( _comp-name ).
            TRY.
                o_cnxlist-&gt;add( o_cnxcomp ).
              CATCH zaplink_cx INTO o_cx.
                IF o_cx-&gt;is_exception_text( zaplink_cx_list=&gt;already_exists ) IS INITIAL. RAISE EXCEPTION o_cx. ENDIF.
            ENDTRY.
          ENDLOOP.

          o_cnxlist-&gt;select_default( zaplink_list=&gt;sel_actions-export ).

          IF NOT o_cont IS BOUND.
* No previous file
            _comp = o_cnx-&gt;get_key( ).
            s_cnxdata-name = _comp-name.
            o_cont = zaplink_container=&gt;create_new( o_file = o_file
                                                      data = s_cnxdata ).
          ENDIF.
          o_cont-&gt;add_components( o_cnxlist ).
          o_contlist ?= o_cont-&gt;get_content( ).
          CLEAR d_change.

          IF NOT o_oriclist IS BOUND.
            CREATE OBJECT o_oriclist.
          ENDIF.
* check for change
          o_contlist-&gt;init_iter( ).
          o_comp = o_contlist-&gt;get_next( ).
          WHILE o_comp IS BOUND.
            o_cnxcomp = o_oriclist-&gt;search( o_comp ).
            IF NOT o_cnxcomp IS BOUND.    d_change = abap_true.   EXIT.   ENDIF.
            IF o_comp-&gt;get_checksum( ) &lt;&gt; o_cnxcomp-&gt;get_checksum( ).    d_change = abap_true.   EXIT.   ENDIF.
            o_comp = o_contlist-&gt;get_next( ).
          ENDWHILE.

          _comp = o_cnx-&gt;get_key( ).
          IF d_change IS INITIAL.
* No change detected for connector : &amp;1 (&amp;2) in file &amp;3
            MESSAGE w015 WITH _comp-name o_conn-&gt;uuid filename INTO d_msg.
            WRITE:/ icon_light_out AS ICON, d_msg.
          ELSE.
* Change detected for connector : &amp;1 (&amp;2) in file &amp;3
            MESSAGE w002 WITH _comp-name o_conn-&gt;uuid filename INTO d_msg.
            WRITE:/ icon_green_light AS ICON, d_msg.
            o_cont-&gt;save_to_file( ).
            o_contlist-&gt;init_iter( ).
            o_cnxcomp = o_contlist-&gt;get_next( ).
            WHILE o_cnxcomp IS BOUND.
              _comp = o_cnxcomp-&gt;get_key( ).    o_comp = o_oriclist-&gt;search( o_cnxcomp ).    CLEAR d_change.
              IF NOT o_comp IS BOUND.
                d_change = abap_true.
              ELSE.
                IF o_comp-&gt;get_checksum( ) &lt;&gt; o_cnxcomp-&gt;get_checksum( ).   d_change = abap_true.   ENDIF.
              ENDIF.
              IF d_change = abap_true.
* Component (&amp;1) &amp;2 has changed and has been updated
                MESSAGE w004 WITH _comp-type _comp-name INTO d_msg.
                WRITE:/ space, space, icon_green_light AS ICON, d_msg.
              ELSE.
* Component (&amp;1) &amp;2 haven&apos;t changed
                MESSAGE i003 WITH _comp-type _comp-name INTO d_msg.
                WRITE:/ space, space, icon_light_out AS ICON, d_msg.
              ENDIF.
              o_cnxcomp = o_contlist-&gt;get_next( ).
            ENDWHILE.
            WRITE:/ .
          ENDIF.

        CATCH zaplink_cx_component INTO _cx_comp.
          CREATE OBJECT _cx_cnx
            EXPORTING
              textid   = zaplink_cx_container=&gt;add_failed
              previous = _cx_comp.
          _cx_cnx-&gt;update( ).   o_cnx-&gt;set_exception( _cx_cnx ).    _comp = o_cnx-&gt;get_key( ).
* Failed to add component &apos;&amp;NAME&amp;&apos; (&amp;TYPE&amp;). Look at exception &amp; message collector in component to get the root cause.
          RAISE EXCEPTION TYPE zaplink_cx_container
                     EXPORTING textid = zaplink_cx_container=&gt;add_comp_failed
                                 type = _comp-type
                                 name = _comp-name.
      ENDTRY.

      TRY.
          o_cnx = o_list-&gt;get_next( ).
        CATCH zaplink_cx_list INTO _cx_list.
          EXIT.
      ENDTRY.
    ENDWHILE.

    mac_def_catch zaplink_cx_connector.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_DEVC_PATH" STATE="1" MTDDECLTYP="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Build path from Devlopment class"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DEVCLASS" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DEVCLASS"/>
     <ITEM SCONAME="DIRECTORY" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DIRECTORYNAME">
      <TEXTS>
       <ITEM LANG="E" TEXT="Client Directory"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_DIRECTORYNAME">
      <TEXTS>
       <ITEM LANG="E" TEXT="Client Directory"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  TYPES: BEGIN OF ts_devc,
           devc TYPE td_devclass,
           path TYPE td_filename,
         END OF ts_devc.
  STATICS: t_devc TYPE SORTED TABLE OF ts_devc WITH UNIQUE KEY devc.
  DATA s_devc     LIKE LINE OF t_devc.
  DATA o_pack     TYPE REF TO if_package.
  DATA d_dir      TYPE td_directoryname.
  DATA rc          TYPE sy-subrc.

  s_devc-devc = devclass.
  READ TABLE t_devc INTO s_devc
       WITH TABLE KEY devc = s_devc-devc.
  IF sy-subrc &lt;&gt; 0.

    CALL METHOD cl_package=&gt;if_package~load_package
      EXPORTING
        i_package_name             = devclass
        i_force_reload             = &apos;X&apos;
      IMPORTING
        e_package                  = o_pack
      EXCEPTIONS
        object_not_existing        = 1
        unexpected_error           = 2
        intern_err                 = 3
        object_locked_and_modified = 4
        OTHERS                     = 5.
    IF sy-subrc &lt;&gt; 0.
    ENDIF.

    IF o_pack-&gt;super_package_name IS INITIAL.
      s_devc-path = devclass.
    ELSE.
      s_devc-path = get_devc_path( directory = directory
                                    devclass = o_pack-&gt;super_package_name ).
      d_dir = devclass.
      s_devc-path = concatenate_path( directory = s_devc-path
                                       filename = d_dir ).
    ENDIF.
    INSERT s_devc INTO TABLE t_devc.
    d_dir = concatenate_path( directory = directory
                               filename = s_devc-path ).
    CALL METHOD cl_gui_frontend_services=&gt;directory_create
      EXPORTING
        directory                = d_dir
      CHANGING
        rc                       = rc
      EXCEPTIONS
        directory_create_failed  = 1
        cntl_error               = 2
        error_no_gui             = 3
        directory_access_denied  = 4
        directory_already_exists = 0
        path_not_found           = 6
        unknown_error            = 7
        not_supported_by_gui     = 8
        wrong_parameter          = 9
        OTHERS                   = 10.
    IF sy-subrc &lt;&gt; 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDIF.
  result = s_devc-path.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="LOAD_FILE" EXPOSURE="1" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Save raw data to file (in XML)"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="FILENAME" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_FILENAME"/>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TS_MY_FILE">
      <TEXTS>
       <ITEM LANG="E" TEXT="RAW component with data"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX" LANGU="E">
      <TEXTS>
       <ITEM LANG="E" TEXT="ZAPlink Framework : Root exception class"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
*  DATA o_xml           TYPE to_xml.
  DATA _tempstring     TYPE string.
*  DATA o_file          TYPE to_file.
  DATA root_node       TYPE REF TO if_ixml_node.

  result-filename = filename.
* Load file if exist
  CREATE OBJECT result-o_file.
  result-o_file-&gt;set_filename( filename ).
  result-o_file-&gt;set_filetype( zaplink_file=&gt;filetypes-local ).
  TRY.
      result-o_file-&gt;load( ).
      _tempstring = result-o_file-&gt;get_filecontent( ).
    CATCH zaplink_cx_file.
      CLEAR _tempstring.
  ENDTRY.

  CHECK NOT _tempstring IS INITIAL. &quot; file exists
  result-o_xml = zaplink_connectors=&gt;string_2_xml( _tempstring ).
  CHECK result-o_xml IS BOUND.

  root_node = result-o_xml-&gt;get_root_element( ).
  TRY.
      result-o_raw_base = zaplink_connectors=&gt;node_2_raw( root_node ).
    CATCH zaplink_cx_connector INTO o_mycx.
      RAISE EXCEPTION o_mycx.
  ENDTRY.
  result-checksum = result-o_raw_base-&gt;get_checksum( ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SAVE_FILE" EXPOSURE="1" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Save raw data to file (in XML)"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="FILENAME" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_FILENAME"/>
     <ITEM SCONAME="O_RAW" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TO_RAW">
      <TEXTS>
       <ITEM LANG="E" TEXT="RAW component with data"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX" LANGU="E">
      <TEXTS>
       <ITEM LANG="E" TEXT="ZAPlink Framework : Root exception class"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DATA _tempstring     TYPE string.
*  DATA o_file          TYPE to_file.
  DATA s_my_file       TYPE ts_my_file.
  DATA d_name          TYPE td_compname.
  DATA d_type          TYPE td_comptype.
  DATA d_msg           TYPE string.

  CHECK o_raw IS BOUND.
* Load file if exist
  s_my_file = load_file( filename ).

  d_name = o_raw-&gt;get_name( ).                              &quot; Issue 32
  d_type = o_raw-&gt;get_type( ).                              &quot; Issue 32
  IF NOT s_my_file-checksum IS INITIAL.  &quot; file allready exists =&gt; check checksum
    o_raw-&gt;set_checksum( ).
    IF o_raw-&gt;get_checksum( ) = s_my_file-checksum. &quot; no change =&gt; skip file
* No change detected on (&amp;1) &amp;2 comparing with file &amp;3
      MESSAGE w000 WITH d_type d_name filename INTO d_msg.
      WRITE:/ zaplink_list_4extractor=&gt;lights-export AS ICON, icon_yellow_light AS ICON, d_msg.
      EXIT.
    ELSE.
      s_my_file-o_xml = zaplink_connectors=&gt;raw_2_xml( o_raw ).
    ENDIF.
  ENDIF.
* Either file do not exists or had to be overwrited

  IF NOT s_my_file-o_xml IS BOUND.    &quot; if not allready done
    o_raw-&gt;set_checksum( ).
    s_my_file-o_xml = zaplink_connectors=&gt;raw_2_xml( o_raw ).
  ENDIF.

  CHECK s_my_file-o_xml IS BOUND.

  _tempstring = zaplink_connectors=&gt;xml_2_string( s_my_file-o_xml ).

  TRY.
      s_my_file-o_file-&gt;set_filecontent( _tempstring ).
      s_my_file-o_file-&gt;save( ).
* (&amp;1) &amp;2 : Change detected - Extracted to file &amp;3
      MESSAGE s001 WITH d_type d_name filename INTO d_msg.
      WRITE:/ zaplink_list_4extractor=&gt;lights-export AS ICON, icon_green_light AS ICON, d_msg.
    CATCH zaplink_cx_file.
* (&amp;1) &amp;2 : Change detected - Failed to save to file &amp;3
      MESSAGE e005 WITH d_type d_name filename INTO d_msg.
      WRITE:/ zaplink_list_4extractor=&gt;lights-export AS ICON, icon_red_light AS ICON, d_msg.
      RETURN.
  ENDTRY.</SOURCE>
   </ITEM>
  </METHODS>
  <TYPEGROUPS>
   <ITEM TYPEGROUP="ABAP" EXPLICIT="X"/>
  </TYPEGROUPS>
  <TYPES>
   <ITEM CMPNAME="TD_DIRECTORYNAME" EXPOSURE="2" STATE="1" TYPTYPE="1" TYPE="TD_FILENAME">
    <TEXTS>
     <ITEM LANG="E" TEXT="Client Directory"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TD_DIRHIERARCHY" EXPOSURE="2" STATE="1" TYPTYPE="1" TYPE="CHAR01">
    <TEXTS>
     <ITEM LANG="E" TEXT="Directory Hierarchy types"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TD_PACKAGE" EXPOSURE="2" STATE="1" TYPTYPE="1" TYPE="DEVCLASS">
    <TEXTS>
     <ITEM LANG="E" TEXT="Package"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_CONNECTOR" EXPOSURE="1" STATE="1" TYPTYPE="3" TYPE="ZAPLINK_CONNECTOR">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZAPLink Connector interface"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_CONNECTOR_CLEANER" EXPOSURE="1" STATE="1" TYPTYPE="3" TYPE="ZAPLINK_CNX_EXT_CLEANER">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZAPLink Connector : Cleanning interface"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_EZ_XML" EXPOSURE="2" STATE="1" TYPTYPE="3" TYPE="ZAPLINK_EASYXML">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZAPLink Easy XML Tools"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_LIST_E" EXPOSURE="1" STATE="1" TYPTYPE="3" TYPE="ZAPLINK_LIST_4EXTRACTOR">
    <TEXTS>
     <ITEM LANG="E" TEXT="ZAPLink list for Extractor"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TS_MY_FILE" EXPOSURE="1" STATE="1" TYPTYPE="4">BEGIN OF ts_my_file,
      o_file      TYPE to_file,
      o_xml       TYPE to_xml,
      o_raw_base  TYPE to_raw_base,
      o_raw       TYPE to_raw,
      filename    TYPE td_filename,
      checksum    TYPE td_checksum,
    END OF ts_my_file
`</ITEM>
  </TYPES>
 </RAW>
</ZL_OBJECT>
