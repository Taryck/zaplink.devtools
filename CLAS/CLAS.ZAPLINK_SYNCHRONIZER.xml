<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="C4FAB93A9970BBE93848C6187270CEF2" CODE_SIGNATURE="468A53880EE8FCA6CB21C74CC66BD35A" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_SYNCHRONIZER" TYPE="CLAS" VERSION="1.01">
 <DIRECTORY DEVCLASS="ZAPLINK-FRAMEWORK-DEVTOOLS" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" CLSCCINCL="X" FIXPT="X" UNICODE="X" MSG_ID="ZAPLINK_EXTRACTOR">
   <INHERITANCE REFCLSNAME="ZAPLINK_EXTRACTOR" STATE="1"/>
   <TEXTS>
    <ITEM LANGU="E" DESCRIPT="ZAPLink : Synchronize tools"/>
   </TEXTS>
  </A0_MAINDATA>
  <LOCAL>
   <TYPES>`
*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature
CLASS lcl_data DEFINITION
  CREATE PUBLIC .

  PUBLIC SECTION.
    INTERFACES zaplink_datatypes.
    ALIASES td_filename FOR zaplink_datatypes~td_filename.
    ALIASES td_checksum FOR zaplink_datatypes~td_checksum.
    ALIASES to_xml      FOR zaplink_datatypes~to_xml.
    ALIASES td_comptype FOR zaplink_datatypes~td_comptype.
    ALIASES td_compname FOR zaplink_datatypes~td_compname.
    ALIASES td_devclass FOR zaplink_datatypes~td_devclass.

    INTERFACES zaplink_kernel_types.
    ALIASES to_raw      FOR zaplink_kernel_types~to_raw.
    ALIASES to_raw_base FOR zaplink_kernel_types~to_raw_base.

    DATA type        TYPE td_comptype.
    DATA name        TYPE td_compname.
    DATA package     TYPE td_devclass.
    DATA o_raw       TYPE to_raw.
    DATA o_raw_base  TYPE to_raw_base.
    DATA filename    TYPE td_filename.
    DATA checksum    TYPE td_checksum.
    DATA signature   TYPE td_checksum.
    DATA o_xml       TYPE to_xml.
    METHODS join
      IMPORTING
        value(data) TYPE REF TO lcl_data.

  PROTECTED SECTION.
  PRIVATE SECTION.
ENDCLASS. &quot;ZAPLINK_TEST definition</TYPES>
   <IMPLEMENTATIONS>`
*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes
CLASS lcl_data IMPLEMENTATION.
  METHOD join.
    DEFINE lmac_join.
      if me-&gt;&amp;1 is initial.   me-&gt;&amp;1 = data-&gt;&amp;1.    endif.
    END-OF-DEFINITION.
    lmac_join: o_xml, o_raw_base, o_raw, filename, checksum, type, name, package, checksum, signature.
  ENDMETHOD.                    &quot;Join
ENDCLASS.                    &quot;lcl_data IMPLEMENTATION</IMPLEMENTATIONS>
   <MACROS>`
*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class
DEFINE lmac_create_data.
  create object &amp;1.
*  &amp;1-&gt;o_file = &amp;2-o_file.
  &amp;1-&gt;o_xml = &amp;2-o_xml.
  &amp;1-&gt;o_raw_base = &amp;2-o_raw_base.
  &amp;1-&gt;o_raw = &amp;2-o_raw.
  &amp;1-&gt;filename = &amp;2-filename.
*  &amp;1-&gt;checksum = &amp;2-checksum.
  if &amp;2-o_raw_base is bound.
    &amp;1-&gt;type = &amp;2-o_raw_base-&gt;get_type( ).
    &amp;1-&gt;name = &amp;2-o_raw_base-&gt;get_name( ).
    &amp;1-&gt;package = &amp;2-o_raw_base-&gt;directory-devclass.
    &amp;1-&gt;checksum = &amp;2-o_raw_base-&gt;get_checksum( ).
    &amp;1-&gt;signature = &amp;2-o_raw_base-&gt;get_code_signature( ).
  elseif &amp;2-o_raw is bound.
    &amp;1-&gt;type = &amp;2-o_raw-&gt;get_type( ).
    &amp;1-&gt;name = &amp;2-o_raw-&gt;get_name( ).
    &amp;1-&gt;package = &amp;2-o_raw-&gt;directory-devclass.
    &amp;1-&gt;checksum = &amp;2-o_raw-&gt;get_checksum( ).
    &amp;1-&gt;signature = &amp;2-o_raw-&gt;get_code_signature( ).
  endif.
END-OF-DEFINITION.</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="GET_LOADED_CHECKSUM" EXPOSURE="1" STATE="1" EDITORDER="2 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Read Checksum of the component when last imported"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="NAME" CMPTYPE="1" EDITORDER="2 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_COMPNAME"/>
     <ITEM SCONAME="RESULT" CMPTYPE="1" EDITORDER="3 " PARDECLTYP="3" TYPTYPE="1" TYPE="TD_CHECKSUM"/>
     <ITEM SCONAME="TYPE" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_COMPTYPE"/>
    </PARAMETERS>
    <SOURCE>`
  SELECT SINGLE checksum INTO result
    FROM zldir
    WHERE type = type
      AND name = name.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SET_LOADED_CHECKSUM" EXPOSURE="1" STATE="1" EDITORDER="3 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Read Checksum of the component when last imported"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="CHECKSUM" CMPTYPE="1" EDITORDER="3 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_CHECKSUM"/>
     <ITEM SCONAME="NAME" CMPTYPE="1" EDITORDER="2 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_COMPNAME"/>
     <ITEM SCONAME="SIGNATURE" CMPTYPE="1" EDITORDER="4 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_CHECKSUM" PAROPTIONL="X"/>
     <ITEM SCONAME="TYPE" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_COMPTYPE"/>
    </PARAMETERS>
    <SOURCE>`
  DATA s_zldir TYPE zldir.
  s_zldir-type = type.
  s_zldir-name = name.
  s_zldir-checksum = checksum.
  s_zldir-signature = signature.
  GET TIME STAMP FIELD s_zldir-timestamp.
  IF s_zldir-type IS INITIAL OR s_zldir-name IS INITIAL.
    BREAK-POINT.
  ELSE.
    MODIFY zldir FROM s_zldir.
  ENDIF.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SYNCHRONIZE" EXPOSURE="2" STATE="1" EDITORDER="1 ">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="Synchronize all components"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="AUTHOR" CMPTYPE="1" EDITORDER="7 " PARPASSTYP="1" TYPTYPE="1" TYPE="TR_AUTHOR"/>
     <ITEM SCONAME="EXT" CMPTYPE="1" EDITORDER="6 " PARPASSTYP="1" TYPTYPE="1" TYPE="ABAP_BOOL"/>
     <ITEM SCONAME="NAME" CMPTYPE="1" EDITORDER="4 " PARPASSTYP="1" TYPTYPE="1" TYPE="TR_COMPNAME"/>
     <ITEM SCONAME="OPTIONS" CMPTYPE="1" EDITORDER="8 " PARPASSTYP="1" TYPTYPE="1" TYPE="TO_OPTIONS" PAROPTIONL="X"/>
     <ITEM SCONAME="PACKAGES" CMPTYPE="1" EDITORDER="5 " PARPASSTYP="1" TYPTYPE="1" TYPE="TR_PACKAGES"/>
     <ITEM SCONAME="SRCSYSTEM" CMPTYPE="1" EDITORDER="2 " PARPASSTYP="1" TYPTYPE="1" TYPE="TR_SRCSYSTEM">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Package"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="TARGET_DIR" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DIRECTORYNAME">
      <TEXTS>
       <ITEM LANGU="E" DESCRIPT="Client Directory"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="TYPE" CMPTYPE="1" EDITORDER="3 " PARPASSTYP="1" TYPTYPE="1" TYPE="TR_COMPTYPE"/>
    </PARAMETERS>
    <SOURCE>`
  DATA o_file      TYPE to_file.
  DATA t_filelist  TYPE zaplink_file=&gt;tt_file_list.
  DATA d_mask      TYPE zaplink_file=&gt;td_filename.
  DATA directory   TYPE string.
  DATA filename    TYPE td_filename.
  DATA t_keys      TYPE tt_compkeys.
  DATA rc          TYPE sy-subrc.
  DATA o_list      TYPE to_list.
  DATA o_tmp_list  TYPE to_list_r.
  DATA o_comp      TYPE to_component.
  DATA o_comp_n    TYPE to_component.
  DATA o_srch_c    TYPE to_component.
  DATA o_conn      TYPE to_connector.
  DATA o_cnx_clean TYPE to_connector_cleaner.
  DATA s_my_file   TYPE ts_my_file.
  DATA o_raw       TYPE REF TO zaplink_raw.
  DATA o_pack_raw  TYPE REF TO zaplink_devc_data.
  DATA o_xml       TYPE REF TO if_ixml_document.
  DATA o_data      TYPE REF TO lcl_data.
  DATA o_data_tmp  TYPE REF TO lcl_data.
  DATA _comp       TYPE zaplink_component=&gt;ts_component.
  DATA d_checksum  TYPE td_checksum.
*  DATA d_signature TYPE td_checksum.
  DATA d_msg       TYPE string.
  DATA o_options   TYPE to_options.
  DATA o_directory TYPE to_opt_directory.
  DATA s_directory TYPE ts_directory.
  DATA o_devc      TYPE to_opt_devclass.
  DATA o_tr        TYPE to_opt_transport_request.

  DATA _cx_cnx  TYPE REF TO zaplink_cx_connector.
  DATA _cx_comp TYPE REF TO zaplink_cx_component.
  DATA _cx_list TYPE REF TO zaplink_cx_list.

  DATA msg       TYPE string.
  DATA _pos      TYPE i.
  DATA d_t_count TYPE sy-tabix.

  FIELD-SYMBOLS:
    &lt;f&gt;    LIKE LINE OF t_filelist,
    &lt;k&gt;    LIKE LINE OF t_keys.

  t_keys = zaplink_tools=&gt;get_keys_from_tadir( srcsystem = srcsystem
                                                   type  = type
                                                    name = name
                                                packages = packages
                                                     ext = ext
                                                  author = author ).

  TRY.
      CREATE OBJECT o_list.
      o_list-&gt;add_keys( t_keys ).
      o_list-&gt;select_default( zaplink_list=&gt;sel_actions-export ).
      o_list-&gt;reverse_selection( ).
      o_tmp_list = o_list-&gt;selection_as_list( ).
      o_list-&gt;remove_list( o_tmp_list ).

* Initialize Interator
      o_list-&gt;order_kind = zaplink_list=&gt;order_kinds-no_order.
      o_list-&gt;init_iter( ).
      o_list-&gt;display_progress = abap_true.
      o_comp_n = o_list-&gt;get_next( ).

      WHILE o_comp_n IS BOUND.
        o_comp = o_comp_n.    o_comp_n = o_list-&gt;get_next( ).
        TRY.
            o_comp-&gt;set_with_subcomp( abap_false ).
            _comp = o_comp-&gt;get_key( ).   o_conn = o_comp-&gt;connector( ).

* Extract Component
            o_raw = o_conn-&gt;read_from_sap( o_comp ).
            TRY.
                CLEAR o_cnx_clean.
                o_cnx_clean ?= o_conn.
                o_cnx_clean-&gt;anonymize( o_raw ).
              CATCH cx_root.
            ENDTRY.
            o_raw-&gt;set_checksum( ).
            s_my_file-o_raw = o_raw.
            lmac_create_data o_data s_my_file.
            o_comp-&gt;set_add_object( o_data ).
            o_comp-&gt;set_checksum( o_data-&gt;checksum ).   o_comp-&gt;set_code_signature( o_data-&gt;signature ).

          CATCH zaplink_cx_connector INTO _cx_cnx.
            o_comp-&gt;set_exception( _cx_cnx ).
            TRY.
                o_comp-&gt;set_msg_coll( o_conn-&gt;application_log ).
              CATCH cx_root.
            ENDTRY.
          CATCH zaplink_cx_component INTO _cx_comp.
            CREATE OBJECT _cx_cnx
              EXPORTING
                textid  = zaplink_cx_container=&gt;add_failed
                prev_cx = _cx_comp.
            _cx_cnx-&gt;update( ).
            o_comp-&gt;set_exception( _cx_cnx ).
* Failed to add component &apos;&amp;NAME&amp;&apos; (&amp;TYPE&amp;). Look at exception &amp; message collector in component to get the root cause.
            RAISE EXCEPTION TYPE zaplink_cx_container
                       EXPORTING textid = zaplink_cx_container=&gt;add_comp_failed
                                   type = _comp-type
                                   name = _comp-name.
        ENDTRY.
      ENDWHILE.

    CATCH zaplink_cx_list INTO _cx_list.
* Failed to components list. Due to exception &apos;&amp;CX_NAME&amp;&apos;.
      CREATE OBJECT o_mycx
        EXPORTING
          textid  = zaplink_cx_component=&gt;invalid_exception
          prev_cx = _cx_list.
      o_mycx-&gt;update( ).
      RAISE EXCEPTION o_mycx.
  ENDTRY.

* Searching in file repository

  CONCATENATE &apos;*&apos; ext_sep file_ext INTO d_mask.
  CREATE OBJECT o_file.
  o_file-&gt;set_filetype( zaplink_file=&gt;filetypes-local ).
  t_filelist = o_file-&gt;search( mask = d_mask
                           root_dir = target_dir ).
  DELETE t_filelist WHERE kind &lt;&gt; zaplink_file=&gt;filedirkinds-file.

  d_t_count = LINES( t_filelist ).
* looking for file to import
  LOOP AT t_filelist ASSIGNING &lt;f&gt;.

    IF sy-batch = abap_true.
* Processing File : &amp;1
      MESSAGE i012 WITH &lt;f&gt;-name.
    ELSE.
* Processing object : &amp;2 (&amp;1)
      MESSAGE i012 WITH &lt;f&gt;-name INTO msg.
      IF d_t_count &gt; 0.
        _pos = 100 * sy-tabix / d_t_count.
      ELSE.
        _pos = sy-tabix.
      ENDIF.
      CALL FUNCTION &apos;SAPGUI_PROGRESS_INDICATOR&apos;
        EXPORTING
          percentage = _pos
          text       = msg.
    ENDIF.

    s_my_file = load_file( &lt;f&gt;-name ).
    CHECK s_my_file-o_raw_base IS BOUND.
    lmac_create_data o_data s_my_file.
    CHECK o_data-&gt;type IN type AND o_data-&gt;name IN name.
*    Check s_my_file-o_raw_base-&gt;directory-devclass IN packages.
    CREATE OBJECT o_comp.
    o_comp-&gt;set_add_object( o_data ).
    o_comp-&gt;set_type( o_data-&gt;type ).    o_comp-&gt;set_name( o_data-&gt;name ).    o_comp-&gt;set_checksum( o_data-&gt;checksum ).
    o_comp-&gt;set_devclass( s_my_file-o_raw_base-&gt;directory-devclass ).   o_comp-&gt;set_src_sys( s_my_file-o_raw_base-&gt;directory-srcsystem ).

    d_checksum = get_loaded_checksum( type = o_data-&gt;type     name = o_data-&gt;name ).
    o_srch_c = o_list-&gt;search( o_comp ).
    IF NOT o_srch_c IS BOUND.     &quot; update data or list
      o_list-&gt;add( o_comp ).      &quot; component do not exists in list
    ELSE.
      o_comp = o_srch_c.
      o_data_tmp ?= o_srch_c-&gt;get_add_object( ).
      IF NOT o_data_tmp IS BOUND.
        o_srch_c-&gt;set_add_object( o_data ).
      ELSE.
        o_data_tmp-&gt;join( o_data ).   o_data = o_data_tmp.
      ENDIF.
    ENDIF.
    IF d_checksum = s_my_file-checksum.        &quot; File and last loaded are the same
      IF NOT o_srch_c IS BOUND.                         &quot; however component do not exists within SAP : deletion handled manualy
        o_comp-&gt;set_action( actions-unreplicable ).
      ELSEIF d_checksum = o_srch_c-&gt;get_checksum( ).    &quot; No change at all
        o_comp-&gt;set_action( actions-none ).
      ELSE.                                             &quot; Default action is allready export
      ENDIF.
    ELSE.   &quot; File different than last load
      IF NOT o_srch_c IS BOUND.                         &quot; New component in SAP
        o_comp-&gt;set_action( actions-import ).
      ELSEIF d_checksum = o_srch_c-&gt;get_checksum( ).    &quot; not change within SAP
        o_comp-&gt;set_action( actions-import ).     o_comp-&gt;set_checksum( s_my_file-checksum ).
        o_comp-&gt;set_devclass( o_data-&gt;o_raw_base-&gt;directory-devclass ).   o_comp-&gt;set_src_sys( o_data-&gt;o_raw_base-&gt;directory-srcsystem ).
      ELSEIF s_my_file-checksum = o_srch_c-&gt;get_checksum( ).   &quot; file and SAP are identical =&gt; Update DB
        o_data-&gt;checksum = s_my_file-checksum.
        o_data-&gt;signature = o_comp-&gt;get_code_signature( ).
        set_loaded_checksum( type = o_data-&gt;type
                             name = o_data-&gt;name
                         checksum = o_data-&gt;checksum
                        signature = o_data-&gt;signature ).
        o_comp-&gt;set_action( actions-none ).
      ELSE.
* Replication conflict
        o_comp-&gt;set_action( actions-unreplicable ).
      ENDIF.
    ENDIF.
  ENDLOOP.

  o_list-&gt;select_by_action( ).
  o_list-&gt;change_selection( ).

  IF options IS BOUND.
    o_options = options.
    o_directory = o_options-&gt;get_directory( ).
  ELSE.
    CREATE OBJECT o_options.
    CREATE OBJECT o_directory.
    CREATE OBJECT o_devc.
    CREATE OBJECT o_tr.
    o_devc-&gt;set_substitutionkind( zaplink_opt_devclass=&gt;substitutionkinds-no_overwrite ).
    o_tr-&gt;set_substitutionkind( zaplink_opt_transport_request=&gt;substitutionkinds-user ).
  ENDIF.

* Initialize Interator
  TRY.
      o_list-&gt;order_kind = zaplink_list=&gt;order_kinds-no_order.
      o_list-&gt;init_sel_iter( ).
      o_list-&gt;display_progress = abap_true.
      o_comp_n = o_list-&gt;get_next( ).

      WHILE o_comp_n IS BOUND.
        TRY.
            o_comp = o_comp_n.    o_comp_n = o_list-&gt;get_next( ).
            o_conn = o_comp-&gt;connector( ).
            CLEAR s_my_file.
            o_data ?= o_comp-&gt;get_add_object( ).
            CASE o_comp-&gt;get_action( ).
              WHEN actions-import.
                s_directory = o_options-&gt;directory-&gt;set_directory( o_data-&gt;o_raw_base ).

                TRY.
                    o_conn-&gt;import_to_sap( o_data-&gt;o_xml ).
* (&amp;1) &amp;2 : Change detected - Imported from file &amp;3
                    MESSAGE s006 WITH o_data-&gt;type o_data-&gt;name o_data-&gt;filename INTO d_msg.
                    WRITE:/ zaplink_list_4extractor=&gt;lights-import AS ICON, zaplink_list_4extractor=&gt;lights-green AS ICON, d_msg.
                  CATCH zaplink_cx_connector INTO _cx_cnx.
* (&amp;1) &amp;2 : Change detected - Failed to load from file &amp;3
                    MESSAGE s007 WITH o_data-&gt;type o_data-&gt;name o_data-&gt;filename INTO d_msg.
                    WRITE:/ zaplink_list_4extractor=&gt;lights-import AS ICON, zaplink_list_4extractor=&gt;lights-red AS ICON, d_msg.
                ENDTRY.

                o_data-&gt;checksum = o_data-&gt;o_raw_base-&gt;get_checksum( ).
                o_data-&gt;signature = o_data-&gt;o_raw_base-&gt;get_code_signature( ).
                set_loaded_checksum( type = o_data-&gt;type
                                     name = o_data-&gt;name
                                 checksum = o_data-&gt;checksum
                                signature = o_data-&gt;signature ).
              WHEN actions-export.
                filename = create_fullpath_by_type( directory = target_dir
                                                         comp = o_comp ).
                CALL METHOD save_file
                  EXPORTING
                    o_raw    = o_data-&gt;o_raw
                    filename = filename.
                o_data-&gt;checksum = o_data-&gt;o_raw-&gt;get_checksum( ).
                o_data-&gt;signature = o_data-&gt;o_raw-&gt;get_code_signature( ).
                set_loaded_checksum( type = o_data-&gt;type
                                     name = o_data-&gt;name
                                 checksum = o_data-&gt;checksum
                                signature = o_data-&gt;signature ).
              WHEN actions-uninstall.
                TRY.
                    o_conn-&gt;delete_from_sap( o_comp ).
* (&amp;1) &amp;2 : Change detected - Component deleted
                    MESSAGE s008 WITH o_data-&gt;type o_data-&gt;name INTO d_msg.
                    WRITE:/ zaplink_list_4extractor=&gt;lights-uninst AS ICON, zaplink_list_4extractor=&gt;lights-green AS ICON, d_msg.
                  CATCH zaplink_cx_connector INTO _cx_cnx.
* (&amp;1) &amp;2 : Change detected - Failed to deleted component
                    MESSAGE s009 WITH o_data-&gt;type o_data-&gt;name INTO d_msg.
                    WRITE:/ zaplink_list_4extractor=&gt;lights-uninst AS ICON, zaplink_list_4extractor=&gt;lights-red AS ICON, d_msg.
                ENDTRY.
              WHEN actions-unreplicable.
* (&amp;1) &amp;2 : Replication Error - 3 differents checksums with file &amp;3
                MESSAGE s010 WITH o_data-&gt;type o_data-&gt;name o_data-&gt;filename INTO d_msg.
                WRITE:/ zaplink_list_4extractor=&gt;lights-rep_error AS ICON, zaplink_list_4extractor=&gt;lights-yellow AS ICON, d_msg.

                IF o_data-&gt;o_raw_base IS BOUND.   s_my_file-checksum = o_data-&gt;o_raw_base-&gt;get_checksum( ).   ENDIF.
                d_checksum = get_loaded_checksum( type = o_data-&gt;type     name = o_data-&gt;name ).
                IF o_data-&gt;o_raw IS BOUND.  o_data-&gt;checksum = o_data-&gt;o_raw-&gt;get_checksum( ).  ELSE. o_data-&gt;checksum = &apos;Not in range&apos;(nir).    ENDIF.
* Checksums : File (&amp;1), Repository (&amp;2) and SAP (&amp;3)
                MESSAGE s011 WITH s_my_file-checksum d_checksum o_data-&gt;checksum INTO d_msg.
                WRITE:/ space, space, d_msg.
              WHEN OTHERS.
            ENDCASE.

          CATCH zaplink_cx_connector INTO _cx_cnx.
            o_comp-&gt;set_exception( _cx_cnx ).
            TRY.
                o_comp-&gt;set_msg_coll( o_conn-&gt;application_log ).
              CATCH cx_root.
            ENDTRY.

          CATCH zaplink_cx_component INTO _cx_comp.
            CREATE OBJECT _cx_cnx
              EXPORTING
                textid  = zaplink_cx_container=&gt;add_failed
                prev_cx = _cx_comp.
            _cx_cnx-&gt;update( ).
            o_comp-&gt;set_exception( _cx_cnx ).
* Failed to add component &apos;&amp;NAME&amp;&apos; (&amp;TYPE&amp;). Look at exception &amp; message collector in component to get the root cause.
            RAISE EXCEPTION TYPE zaplink_cx_container
                       EXPORTING textid = zaplink_cx_container=&gt;add_comp_failed
                                   type = _comp-type
                                   name = _comp-name.
        ENDTRY.
      ENDWHILE.
    CATCH zaplink_cx_list INTO _cx_list.
* Failed to components list. Due to exception &apos;&amp;CX_NAME&amp;&apos;.
      CREATE OBJECT o_mycx
        EXPORTING
          textid  = zaplink_cx_component=&gt;invalid_exception
          prev_cx = _cx_list.
      o_mycx-&gt;update( ).
      RAISE EXCEPTION o_mycx.
  ENDTRY.</SOURCE>
   </ITEM>
  </METHODS>
  <TYPES>
   <ITEM CMPNAME="TO_LIST" STATE="1" EDITORDER="1 " TYPTYPE="3" TYPE="ZAPLINK_LIST_4EXTRACTOR">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPLink list for Extractor"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="TO_LIST_R" STATE="1" EDITORDER="2 " TYPTYPE="3" TYPE="ZAPLINK_LIST">
    <TEXTS>
     <ITEM LANGU="E" DESCRIPT="ZAPLink list for Extractor"/>
    </TEXTS>
   </ITEM>
  </TYPES>
 </RAW>
</ZL_OBJECT>
