<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="FF5E49CDA6C93D25A32DD3DB7884EB6F" CODE_SIGNATURE="C9BE94FD448C9C448F886E8E4B6ECBC1" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_STANDALONE_GENERATOR" TYPE="CLAS" VERSION="1.01">
 <DIRECTORY DEVCLASS="ZAPLINK-DEVTOOLS" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" CLSCCINCL="X" FIXPT="X" UNICODE="X">
   <INHERITANCE REFCLSNAME="ZAPLINK_DEPENDENCIES_ANALYSER" STATE="1"/>
   <TEXTS>
    <ITEM LANG="E" TEXT="ZAPLink : Stand Alone Generator (local class&amp;intf)">U1&amp;FUNCTIONALITY&amp;
ASTools used to maps dependencies of :
AS,,- Programs
AS,,- Classes
AS,,- Interfaces
ASTo build a &quot;standalone&quot; version with every class, interface and include
  in the right order to compile.
ASThis tools is used to build the ZAPLink installer used to install the
  framework. This tools is not part of the framework.
U1&amp;RELATIONS&amp;
AS
U1&amp;EXAMPLE&amp;
AS
U1&amp;HINTS&amp;
AS
U1&amp;FURTHER_SOURCES_OF_INF&amp;
AS
U1Memories
ASThis application is dedicated to the memories of :
B2My father : Lamri BENSIALI (1940-2004) without whom I never started
  programming
B2My uncle : Jacky BEDU (1934-2009) who died during the completion of this
  application</ITEM>
   </TEXTS>
  </A0_MAINDATA>
  <ATTRIBUTS>
   <ITEM CMPNAME="ABAP_SOURCECODE" EXPOSURE="1" STATE="1" EDITORDER="2 " TYPTYPE="1" TYPE="TT_ABAPRAWSOURCE"/>
   <ITEM CMPNAME="CONNECTORS_SOURCECODE" EXPOSURE="1" STATE="1" EDITORDER="1 " TYPTYPE="1" TYPE="TT_ABAPRAWSOURCE"/>
   <ITEM CMPNAME="MASTER_PROGRAM" EXPOSURE="2" STATE="1" EDITORDER="1 " ATTRDONLY="X" TYPTYPE="1" TYPE="TD_PROGNAME">
    <TEXTS>
     <ITEM LANG="E" TEXT="Master Program Name"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="MASTER_SOURCECODE" EXPOSURE="1" STATE="1" EDITORDER="3 " TYPTYPE="1" TYPE="TT_ABAPRAWSOURCE">
    <TEXTS>
     <ITEM LANG="E" TEXT="Source code of Master program"/>
    </TEXTS>
   </ITEM>
  </ATTRIBUTS>
  <LOCAL>
   <TYPES>`
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* IMPLEMENTATION OR PRIVATE METHOD&apos;S SIGNATURE</TYPES>
   <IMPLEMENTATIONS>`
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* LOCAL HELPER CLASSES</IMPLEMENTATIONS>
   <MACROS>`
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* IN THE IMPLEMENTATION PART OF THE CLASS

  DEFINE mac_read_tadir.
    select single devclass dlvunit into (&amp;4, &amp;5)
      from v_tralan
      where pgmid = &amp;1
        and object = &amp;2
        and obj_name = &amp;3.
  END-OF-DEFINITION.

  DEFINE mac_add_comp.
    if not s_comp-kind is initial and not s_comp-type is initial and not s_comp-name is initial.
      mac_read_tadir s_comp-kind s_comp-type s_comp-name s_comp-devclass s_comp-softcomp.
      if s_comp-devclass in packages and s_comp-softcomp in softcomponents.
        insert s_comp into table all_components.
      endif.
    endif.
  END-OF-DEFINITION.</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="ADD_CONNECTORS" EXPOSURE="2" STATE="1" EDITORDER="3 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Add Connectors to Source Code"/>
    </TEXTS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANG="E" TEXT="ZAPlink Framework : Root exception class"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DATA _line LIKE LINE OF connectors_sourcecode.
  DATA _comp TYPE REF TO zaplink_component.
  DATA _classname TYPE zaplink_component=&gt;td_connclass.
  DATA o_conn TYPE REF TO zaplink_connector.
  DATA _classes TYPE SORTED TABLE OF zaplink_component=&gt;td_connclass WITH UNIQUE KEY table_line.
  FIELD-SYMBOLS:
    &lt;c&gt; LIKE LINE OF zaplink_connectors=&gt;supported_types.

  REFRESH connectors_sourcecode.
*  SORT t_connectors BY classname.
*  DELETE ADJACENT DUPLICATES FROM t_connectors COMPARING classname.
  add_object( &apos;ZAPLINK_CONNECTORS&apos; ).                       &quot;#EC NOTEXT
  _line = &apos;ZAPLINK_CONNECTORS=&gt;clear_connectors( ).&apos;. APPEND _line TO connectors_sourcecode. &quot;#EC NOTEXT : remove ABAP class connector to add only local ones
  _line = &apos;DATA _cx_90335e5d44316adf4805a732f type ref to ZAPLINK_CX_COMPONENT.&apos;. APPEND _line TO connectors_sourcecode. &quot;#EC NOTEXT
  _line = &apos;TRY.&apos;. APPEND _line TO connectors_sourcecode.    &quot;#EC NOTEXT
  LOOP AT zaplink_connectors=&gt;supported_types ASSIGNING &lt;c&gt;.
    CREATE OBJECT _comp.
    _comp-&gt;set_type( &lt;c&gt;-type ).
    o_conn = _comp-&gt;connector( ).
    _classname = zaplink_connectors=&gt;get_classname( o_conn ).
    CHECK NOT _classname IS INITIAL.
    READ TABLE _classes TRANSPORTING NO FIELDS
         WITH TABLE KEY table_line = _classname.
    IF sy-subrc &lt;&gt; 0.
      INSERT _classname INTO TABLE _classes.
      add_object( _classname ).
      CLEAR _line.
      CONCATENATE &apos;ZAPLINK_CONNECTORS=&gt;ADD_LOCAL_CONNECTOR(&apos;&apos;&apos; _classname &apos;&apos;&apos;).&apos; INTO _line. &quot;#EC NOTEXT
      APPEND _line TO connectors_sourcecode.
    ENDIF.
  ENDLOOP.
  _line = &apos;CATCH ZAPLINK_CX_COMPONENT INTO _cx_90335e5d44316adf4805a732f.&apos;. APPEND _line TO connectors_sourcecode. &quot;#EC NOTEXT
  _line = &apos;_cx_90335e5d44316adf4805a732f-&gt;write( ).&apos;. APPEND _line TO connectors_sourcecode. &quot;#EC NOTEXT
  _line = &apos;BREAK-POINT.&apos;. APPEND _line TO connectors_sourcecode. &quot;#EC NOTEXT
  _line = &apos;RAISE EXCEPTION _cx_90335e5d44316adf4805a732f.&apos;. APPEND _line TO connectors_sourcecode. &quot;#EC NOTEXT
  _line = &apos;ENDTRY.&apos;. APPEND _line TO connectors_sourcecode. &quot;#EC NOTEXT</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CONSTRUCTOR" EXPOSURE="2" STATE="1" EDITORDER="1 " MTDTYPE="2" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="CONSTRUCTOR"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="MASTER" CMPTYPE="1" MTDTYPE="2" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_PROGNAME" PAROPTIONL="X"/>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX" LANGU="E" MTDTYPE="2" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANG="E" TEXT="ZAPlink Framework : Root exception class"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DATA sourcecode  TYPE tt_abaprawsource.
  super-&gt;constructor( ).

  master_program = master.
  IF NOT master_program IS INITIAL.
    master_sourcecode = sourcecode = zaplink_program_4sag=&gt;get_prog_rawsource( master_program ).
    add_source( code = sourcecode   origin = master_program ).
  ENDIF.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GENERATE" EXPOSURE="2" STATE="1" EDITORDER="2 ">
    <TEXTS>
     <ITEM LANG="E" TEXT="Generate ABAP Source Code"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="CODE" CMPTYPE="1" EDITORDER="1 " PARDECLTYP="3" TYPTYPE="1" TYPE="TT_ABAPRAWSOURCE">
      <TEXTS>
       <ITEM LANG="E" TEXT="ABAP Source Code"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  DATA _tmp_code TYPE ts_source.
  DATA _line     LIKE LINE OF _tmp_code-def.
  DATA _tmp      TYPE tt_abaprawsource.
  DATA _pos      TYPE sy-tabix.
  DATA _order    TYPE tt_order.
  DATA d_report  TYPE programm.
  FIELD-SYMBOLS:
    &lt;t&gt; LIKE LINE OF typegroups,
    &lt;i&gt; LIKE LINE OF includes,
    &lt;c&gt; LIKE LINE OF classes,
    &lt;o&gt; LIKE LINE OF order.
  DATA t_tokens TYPE STANDARD TABLE OF stokes.
  DATA t_statements TYPE STANDARD TABLE OF sstmnt.
  DATA t_kw      TYPE STANDARD TABLE OF char255.
  DATA s_kw      LIKE LINE OF t_kw.
  FIELD-SYMBOLS:
    &lt;t_deb&gt; LIKE LINE OF t_tokens,
    &lt;st&gt; LIKE LINE OF t_statements.

  _clean_up( ).
  resolve( ).
  LOOP AT typegroups ASSIGNING &lt;t&gt;.   IF _line IS INITIAL. CONCATENATE &apos;TYPE-POOLS: &apos; &lt;t&gt;-name INTO _line. ELSE. CONCATENATE _line &apos;, &apos; &lt;t&gt;-name INTO _line. ENDIF.   ENDLOOP.
  IF NOT _line IS INITIAL. CONCATENATE _line &apos;.&apos; INTO _line. APPEND _line TO code. ENDIF.

* DEFERRED declaration first
  _order = order.
  SORT _order BY name type.
  DELETE ADJACENT DUPLICATES FROM _order COMPARING name.
  LOOP AT _order ASSIGNING &lt;o&gt;.
    add_deferred_code( EXPORTING     type = &lt;o&gt;-type
                                     name = &lt;o&gt;-name
                        CHANGING abapcode = code ).
  ENDLOOP.

* Prepare objects
  LOOP AT order ASSIGNING &lt;o&gt;.
    IF NOT &lt;o&gt;-defered IS INITIAL.
* Insert defered call
* use less because already done before
      add_deferred_code( EXPORTING     type = &lt;o&gt;-type
                                       name = &lt;o&gt;-name
                          CHANGING abapcode = _tmp_code-def ).
    ELSE.
      READ TABLE classes ASSIGNING &lt;c&gt;
           WITH TABLE KEY name = &lt;o&gt;-name.
      IF sy-subrc &lt;&gt; 0.
        CONTINUE.
      ENDIF.
      APPEND LINES OF &lt;c&gt;-def TO _tmp_code-def.
      APPEND LINES OF &lt;c&gt;-macro TO _tmp_code-macro.
      APPEND LINES OF &lt;c&gt;-impl TO _tmp_code-impl.
** Put macro into implementation
*      IF &lt;c&gt;-macro IS INITIAL.
*        APPEND LINES OF &lt;c&gt;-impl TO _tmp_code-impl.
*      ELSE.
*        _tmp = &lt;c&gt;-impl.
*        LOOP AT _tmp TRANSPORTING NO FIELDS
*             WHERE table_line CP &apos;*CLASS * IMPLEMENTATION*.*&apos;.
*          _pos = sy-tabix + 1.
*          EXIT.
*        ENDLOOP.
*        IF sy-subrc &lt;&gt; 0.
*          APPEND LINES OF &lt;c&gt;-macro TO _tmp_code-macro.
*          APPEND LINES OF &lt;c&gt;-impl TO _tmp_code-impl.
*        ELSE.
*          INSERT LINES OF &lt;c&gt;-macro INTO _tmp INDEX _pos.
*          APPEND LINES OF _tmp TO _tmp_code-impl.
*        ENDIF.
*      ENDIF.
    ENDIF.
  ENDLOOP.

* Objects definition second because might be used by includes
  APPEND LINES OF _tmp_code-def TO code.

* Include third
  s_kw = &apos;PROGRAM&apos;.    APPEND s_kw TO t_kw.
  s_kw = &apos;REPORT&apos;.     APPEND s_kw TO t_kw.
  LOOP AT includes ASSIGNING &lt;i&gt;.
    d_report = &lt;i&gt;.   CLEAR _tmp.
    READ REPORT d_report INTO _tmp.
    CHECK sy-subrc = 0.
    SCAN ABAP-SOURCE _tmp TOKENS INTO t_tokens
                      STATEMENTS INTO t_statements
                        KEYWORDS FROM t_kw.
    zaplink_tools=&gt;inverse_table_order( CHANGING my_table = t_statements ).
    LOOP AT t_statements ASSIGNING &lt;st&gt;.
      READ TABLE t_tokens ASSIGNING &lt;t_deb&gt; INDEX &lt;st&gt;-from.    CHECK sy-subrc = 0.
      DELETE _tmp FROM &lt;t_deb&gt;-row TO &lt;st&gt;-trow.
    ENDLOOP.
*    APPEND LINES OF _tmp TO _tmp_code-macro.
    APPEND LINES OF _tmp TO code.
  ENDLOOP.

* remaining of the object then
  APPEND LINES OF _tmp_code-macro TO code.
  APPEND LINES OF _tmp_code-impl TO code.

* Insert into Master source code
  abap_sourcecode = master_sourcecode.
  IF NOT abap_sourcecode IS INITIAL.
    REFRESH t_kw.
*  s_kw = &apos;INITIALIZATION&apos;.        APPEND s_kw TO t_kw.
    s_kw = &apos;START-OF-SELECTION&apos;.    APPEND s_kw TO t_kw.
    s_kw = &apos;REPORT&apos;.                APPEND s_kw TO t_kw.
    SCAN ABAP-SOURCE abap_sourcecode TOKENS INTO t_tokens
                                 STATEMENTS INTO t_statements
                                   KEYWORDS FROM t_kw.
    IF NOT connectors_sourcecode IS INITIAL.
      READ TABLE t_tokens ASSIGNING &lt;t_deb&gt; WITH KEY str = &apos;START-OF-SELECTION&apos;.
      ASSERT sy-subrc = 0.  _pos = sy-tabix.
      READ TABLE t_statements ASSIGNING &lt;st&gt; WITH KEY FROM = _pos.
      ASSERT sy-subrc = 0.
      READ TABLE t_tokens ASSIGNING &lt;t_deb&gt; INDEX &lt;st&gt;-to.
      ASSERT sy-subrc = 0.
      _pos = &lt;t_deb&gt;-row + 1.
      INSERT LINES OF connectors_sourcecode INTO abap_sourcecode INDEX _pos.
    ENDIF.

    READ TABLE t_tokens ASSIGNING &lt;t_deb&gt; WITH KEY str = &apos;REPORT&apos;.
    ASSERT sy-subrc = 0.  _pos = sy-tabix.
    READ TABLE t_statements ASSIGNING &lt;st&gt; WITH KEY FROM = _pos.
    ASSERT sy-subrc = 0.
    READ TABLE t_tokens ASSIGNING &lt;t_deb&gt; INDEX &lt;st&gt;-to.
    ASSERT sy-subrc = 0.
    _pos = &lt;t_deb&gt;-row + 1.
    INSERT LINES OF code INTO abap_sourcecode INDEX _pos.
    code = abap_sourcecode.
  ENDIF.

*  code = clean_code( code ).
  remove_checkpoints( CHANGING code = code ).           &quot; Issue 107
  zaplink_tools=&gt;remove_comment_on_source( CHANGING table = code ).
  abap_sourcecode = code.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="REMOVE_CHECKPOINTS" EXPOSURE="1" STATE="1" EDITORDER="5 " MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Remove checkpoints on source code"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="CODE" CMPTYPE="1" EDITORDER="1 " PARDECLTYP="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TT_ABAPRAWSOURCE">
      <TEXTS>
       <ITEM LANG="E" TEXT="Table source code"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  DATA c_log        TYPE string VALUE &apos;LOG-POINT&apos;.
  DATA c_assert     TYPE string VALUE &apos;ASSERT&apos;.
  DATA c_break      TYPE string VALUE &apos;BREAK-POINT&apos;.
  DATA t_tokens     TYPE STANDARD TABLE OF stokes.
  DATA t_statements TYPE STANDARD TABLE OF sstmnt.
  DATA t_kw         TYPE STANDARD TABLE OF char255.
  DATA s_kw         LIKE LINE OF t_kw.
  DATA d_line       TYPE i.
  DATA d_start      TYPE i.
  DATA d_end        TYPE i.
  DATA d_sdeb       TYPE string.
  DATA d_sfin       TYPE string.
  FIELD-SYMBOLS:
    &lt;t_deb&gt; LIKE LINE OF t_tokens,
    &lt;t_fin&gt; LIKE LINE OF t_tokens,
    &lt;l&gt;  LIKE LINE OF code,
    &lt;st&gt; LIKE LINE OF t_statements.

* Include third
  s_kw = c_assert.      APPEND s_kw TO t_kw.
  s_kw = c_log.         APPEND s_kw TO t_kw.
  s_kw = c_break.       APPEND s_kw TO t_kw.
  SCAN ABAP-SOURCE code TOKENS INTO t_tokens
                    STATEMENTS INTO t_statements
                      KEYWORDS FROM t_kw.
  zaplink_tools=&gt;inverse_table_order( CHANGING my_table = t_statements ).
*  LOOP at t_tokens ASSIGNING &lt;t_deb&gt; where str = c_Log.
*
*  endloop.
  LOOP AT t_statements ASSIGNING &lt;st&gt;.
    READ TABLE t_tokens ASSIGNING &lt;t_deb&gt; INDEX &lt;st&gt;-from.    CHECK sy-subrc = 0.
    CASE &lt;t_deb&gt;-str.
      WHEN c_log.
      WHEN OTHERS.
        d_line = &lt;st&gt;-from + 1.   CHECK d_line &lt;= &lt;st&gt;-to.
        READ TABLE t_tokens ASSIGNING &lt;t_deb&gt; INDEX d_line.    CHECK sy-subrc = 0.
        IF &lt;t_deb&gt;-str &lt;&gt; &apos;ID&apos;.   CONTINUE.   ENDIF.
    ENDCASE.
* Need to remove statement
    READ TABLE t_tokens ASSIGNING &lt;t_deb&gt; INDEX &lt;st&gt;-from.    ASSERT sy-subrc = 0.
    READ TABLE t_tokens ASSIGNING &lt;t_fin&gt; INDEX &lt;st&gt;-to.      ASSERT sy-subrc = 0.
    READ TABLE code ASSIGNING &lt;l&gt; INDEX &lt;t_fin&gt;-row.          ASSERT sy-subrc = 0.
    IF &lt;t_deb&gt;-row = &lt;t_fin&gt;-row.     &quot; on the same line

      CLEAR: d_sdeb, d_sfin.
      d_end = &lt;t_fin&gt;-col + STRLEN( &lt;t_fin&gt;-str ).
      d_sdeb = &lt;l&gt;(&lt;t_deb&gt;-col).    d_sfin = &lt;l&gt;+d_end.
*      CLEAR &lt;l&gt;+&lt;t_deb&gt;-col(&lt;t_fin&gt;-row).
      CONCATENATE d_sdeb d_sfin INTO &lt;l&gt;.
      CONDENSE &lt;l&gt;.

    ELSE.
* Last line
      CLEAR: d_sdeb, d_sfin.
      d_end = &lt;t_fin&gt;-col + STRLEN( &lt;t_fin&gt;-str ).
      d_sfin = &lt;l&gt;+d_end.
*      CLEAR &lt;l&gt;(&lt;t_fin&gt;-row).
      &lt;l&gt; = d_sfin.
      CONDENSE &lt;l&gt;.

* Middle lines
      d_start = &lt;t_deb&gt;-row + 1.      d_end = &lt;t_fin&gt;-row - 1.
      IF d_start &lt;= d_end.      DELETE code FROM d_start TO d_end.     ENDIF.

* First line
      READ TABLE code ASSIGNING &lt;l&gt; INDEX &lt;t_deb&gt;-row.         ASSERT sy-subrc = 0.
      CLEAR: d_sdeb, d_sfin.
      d_sdeb = &lt;l&gt;(&lt;t_deb&gt;-col).
*      CLEAR &lt;l&gt;(&lt;t_fin&gt;-row).
      &lt;l&gt; = d_sdeb.
      CONDENSE &lt;l&gt;.
    ENDIF.
  ENDLOOP.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SAVE_REPORT" EXPOSURE="2" STATE="1" EDITORDER="4 " MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Save generated code to report"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="CODE" CMPTYPE="1" EDITORDER="2 " PARPASSTYP="1" TYPTYPE="1" TYPE="TT_ABAPRAWSOURCE" PAROPTIONL="X"/>
     <ITEM SCONAME="PACKAGE" CMPTYPE="1" EDITORDER="3 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DEVCLASS" PARVALUE="&apos;$TMP&apos;" PAROPTIONL="X"/>
     <ITEM SCONAME="REPORT" CMPTYPE="1" EDITORDER="1 " PARPASSTYP="1" TYPTYPE="1" TYPE="TD_PROGNAME"/>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="ZAPLINK_CX" LANGU="E" EDITORDER="1 ">
      <TEXTS>
       <ITEM LANG="E" TEXT="ZAPlink Framework : Root exception class"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DATA t_source    TYPE tt_abaprawsource.
  DATA _prog       TYPE progdir.
  DATA _oname      TYPE e071-obj_name.

  IF code IS INITIAL.
    t_source = abap_sourcecode.
  ELSE.
    t_source = code.
    zaplink_tools=&gt;remove_comment_on_source( CHANGING table = t_source ).
  ENDIF.

  CALL FUNCTION &apos;RS_CORR_INSERT&apos;
    EXPORTING
      object                         = report
      object_class                   = &apos;ABAP&apos;
      mode                           = &apos;I&apos;    &quot; Insert
*         GLOBAL_LOCK                    = &apos; &apos;
      devclass                       = package
*         KORRNUM                        = &apos; &apos;
*         USE_KORRNUM_IMMEDIATEDLY       = &apos; &apos;
*         AUTHOR                         = &apos; &apos;
*         MASTER_LANGUAGE                = &apos; &apos;
*         GENFLAG                        = &apos; &apos;
*         PROGRAM                        = &apos; &apos;
*         OBJECT_CLASS_SUPPORTS_MA       = &apos; &apos;
*         EXTEND                         = &apos; &apos;
*         SUPPRESS_DIALOG                = &apos; &apos;
*         MOD_LANGU                      = &apos; &apos;
*         ACTIVATION_CALL                = &apos; &apos;
*       IMPORTING
*         DEVCLASS                       =
*         KORRNUM                        =
*         ORDERNUM                       =
*         NEW_CORR_ENTRY                 =
*         AUTHOR                         =
*         TRANSPORT_KEY                  =
*         NEW_EXTEND                     =
    EXCEPTIONS
      cancelled                      = 1
      permission_failure             = 2
      unknown_objectclass            = 3
      OTHERS                         = 4.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  _oname = report.
  CALL FUNCTION &apos;RS_INSERT_INTO_WORKING_AREA&apos;
    EXPORTING
      object                  = &apos;REPS&apos;
      obj_name                = _oname
*         DELETED_FLAG            = &apos; &apos;
*       IMPORTING
*         OBJECT_INSERTED         =
    EXCEPTIONS
      wrong_object_name       = 1
      OTHERS                  = 2.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  _prog-name = report.
  _prog-state = &apos;I&apos;.
  _prog-edtx = &apos;X&apos;.
  _prog-varcl = &apos;X&apos;.
*  _prog-fixpt = &apos;X&apos;.
  _prog-rstat = &apos;T&apos;.
  _prog-vern = 1.
  _prog-subc = &apos;1&apos;.    &quot;Executable program
  _prog-unam = _prog-cnam = sy-uname.
  _prog-sdate = _prog-idate = _prog-udat = _prog-cdat = sy-datum.
  _prog-stime = _prog-itime = sy-uzeit.
  _prog-rmand = sy-mandt.
  _prog-rload = sy-langu.
  MODIFY progdir FROM _prog.
*  _prog-state = &apos;A&apos;.
*  MODIFY progdir FROM _prog.
  zaplink_program_4sag=&gt;set_prog_rawsource( program = report
                                                raw = t_source ).
  set_textpool( report ).</SOURCE>
   </ITEM>
  </METHODS>
  <TYPEGROUPS>
   <ITEM TYPEGROUP="ABAP" EXPLICIT="X"/>
   <ITEM TYPEGROUP="SEOP" EXPLICIT="X"/>
  </TYPEGROUPS>
 </RAW>
</ZL_OBJECT>
