<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="C5365257F42072F2D81F9F609268A6F4" CODE_SIGNATURE="A55EA7659D86B03EF1E818F9E8010847" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_STANDALONE_GENERATOR" TYPE="CLAS" VERSION="1.01">
 <DIRECTORY DEVCLASS="ZAPLINK-FRAMEWORK-DEVTOOLS" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" CLSCCINCL="X" FIXPT="X" UNICODE="X">
   <INHERITANCE REFCLSNAME="ZAPLINK_DEPENDENCIES_ANALYSER" STATE="1"/>
   <TEXTS>
    <ITEM LANG="E" TEXT="ZAPLink : Stand Alone Generator (local class&amp;intf)">U1&amp;FUNCTIONALITY&amp;
ASTools used to maps dependencies of :
AS,,- Programs
AS,,- Classes
AS,,- Interfaces
ASTo build a &quot;standalone&quot; version with every class, interface and include
  in the right order to compile.
ASThis tools is used to build the ZAPLink installer used to install the
  framework. This tools is not part of the framework.
U1&amp;RELATIONS&amp;
AS
U1&amp;EXAMPLE&amp;
AS
U1&amp;HINTS&amp;
AS
U1&amp;FURTHER_SOURCES_OF_INF&amp;
AS
U1Memories
ASThis application is dedicated to the memories of :
B2My father : Lamri BENSIALI (1940-2004) without whom I never started
  programming
B2My uncle : Jacky BEDU (1934-2009) who died during the completion of this
  application</ITEM>
   </TEXTS>
  </A0_MAINDATA>
  <LOCAL>
   <TYPES>`
*&quot;* USE THIS SOURCE FILE FOR ANY TYPE DECLARATIONS (CLASS
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* IMPLEMENTATION OR PRIVATE METHOD&apos;S SIGNATURE</TYPES>
   <IMPLEMENTATIONS>`
*&quot;* LOCAL CLASS IMPLEMENTATION FOR PUBLIC CLASS
*&quot;* use this source file for the implementation part of
*&quot;* LOCAL HELPER CLASSES</IMPLEMENTATIONS>
   <MACROS>`
*&quot;* USE THIS SOURCE FILE FOR ANY MACRO DEFINITIONS YOU NEED
*&quot;* IN THE IMPLEMENTATION PART OF THE CLASS

  DEFINE mac_read_tadir.
    select single devclass dlvunit into (&amp;4, &amp;5)
      from v_tralan
      where pgmid = &amp;1
        and object = &amp;2
        and obj_name = &amp;3.
  END-OF-DEFINITION.

  DEFINE mac_add_comp.
    if not s_comp-kind is initial and not s_comp-type is initial and not s_comp-name is initial.
      mac_read_tadir s_comp-kind s_comp-type s_comp-name s_comp-devclass s_comp-softcomp.
      if s_comp-devclass in packages and s_comp-softcomp in softcomponents.
        insert s_comp into table all_components.
      endif.
    endif.
  END-OF-DEFINITION.</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="GENERATE" EXPOSURE="2" STATE="1" EDITORDER="1 ">
    <TEXTS>
     <ITEM LANG="E" TEXT="Generate ABAP Source Code"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="CODE" CMPTYPE="1" EDITORDER="1 " PARDECLTYP="3" TYPTYPE="1" TYPE="TD_SOURCECODE">
      <TEXTS>
       <ITEM LANG="E" TEXT="ABAP Source Code"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  DATA _tmp_code TYPE ts_source.
  DATA _line     LIKE LINE OF _tmp_code-def.
  DATA _tmp      TYPE td_sourcecode.
  DATA _pos      TYPE sy-tabix.
  DATA _order    TYPE tt_order.
  DATA d_report  TYPE programm.
  FIELD-SYMBOLS:
    &lt;t&gt; LIKE LINE OF typegroups,
    &lt;i&gt; LIKE LINE OF includes,
    &lt;c&gt; LIKE LINE OF classes,
    &lt;o&gt; LIKE LINE OF order.
  DATA t_tokens TYPE STANDARD TABLE OF stokes.
  DATA t_statements TYPE STANDARD TABLE OF sstmnt.
  DATA t_kw      TYPE STANDARD TABLE OF char255.
  DATA s_kw      LIKE LINE OF t_kw.
  FIELD-SYMBOLS:
    &lt;t_deb&gt; LIKE LINE OF t_tokens,
    &lt;st&gt; LIKE LINE OF t_statements.

  _clean_up( ).
  resolve( ).
  LOOP AT typegroups ASSIGNING &lt;t&gt;.
    IF _line IS INITIAL. CONCATENATE &apos;TYPE-POOLS: &apos; &lt;t&gt;-name INTO _line. ELSE. CONCATENATE _line &apos;, &apos; &lt;t&gt;-name INTO _line. ENDIF.
  ENDLOOP.
  IF NOT _line IS INITIAL. CONCATENATE _line &apos;.&apos; INTO _line. APPEND _line TO code. ENDIF.

* DEFERRED declaration first
  _order = order.
  SORT _order BY name type.
  DELETE ADJACENT DUPLICATES FROM _order COMPARING name.
  LOOP AT _order ASSIGNING &lt;o&gt;.
    add_deferred_code( EXPORTING     type = &lt;o&gt;-type
                                     name = &lt;o&gt;-name
                        CHANGING abapcode = code ).
  ENDLOOP.

  LOOP AT order ASSIGNING &lt;o&gt;.
    IF NOT &lt;o&gt;-defered IS INITIAL.
* Insert defered call
* use less because already done before
      add_deferred_code( EXPORTING     type = &lt;o&gt;-type
                                       name = &lt;o&gt;-name
                          CHANGING abapcode = _tmp_code-def ).
    ELSE.
      READ TABLE classes ASSIGNING &lt;c&gt;
           WITH TABLE KEY name = &lt;o&gt;-name.
      IF sy-subrc &lt;&gt; 0.
        CONTINUE.
      ENDIF.
      APPEND LINES OF &lt;c&gt;-def TO _tmp_code-def.
* Put macro into implementation
      IF &lt;c&gt;-macro IS INITIAL.
        APPEND LINES OF &lt;c&gt;-impl TO _tmp_code-impl.
      ELSE.
        _tmp = &lt;c&gt;-impl.
        LOOP AT _tmp TRANSPORTING NO FIELDS
             WHERE table_line CP &apos;*CLASS * IMPLEMENTATION*.*&apos;.
          _pos = sy-tabix + 1.
          EXIT.
        ENDLOOP.
        IF sy-subrc &lt;&gt; 0.
          APPEND LINES OF &lt;c&gt;-macro TO _tmp_code-macro.
          APPEND LINES OF &lt;c&gt;-impl TO _tmp_code-impl.
        ELSE.
          INSERT LINES OF &lt;c&gt;-macro INTO _tmp INDEX _pos.
          APPEND LINES OF _tmp TO _tmp_code-impl.
        ENDIF.
      ENDIF.
    ENDIF.
  ENDLOOP.

  s_kw = &apos;PROGRAM&apos;.    APPEND s_kw TO t_kw.
  s_kw = &apos;REPORT&apos;.     APPEND s_kw TO t_kw.
  LOOP AT includes ASSIGNING &lt;i&gt;.
    d_report = &lt;i&gt;.
    READ REPORT d_report INTO _tmp.
    SCAN ABAP-SOURCE _tmp TOKENS INTO t_tokens
                      STATEMENTS INTO t_statements
                        KEYWORDS FROM t_kw.
    zaplink_tools=&gt;inverse_table_order( changing my_table = t_statements ).
    LOOP AT t_statements ASSIGNING &lt;st&gt;.
      READ TABLE t_tokens ASSIGNING &lt;t_deb&gt; INDEX &lt;st&gt;-from.    CHECK sy-subrc = 0.
      DELETE _tmp FROM &lt;t_deb&gt;-row TO &lt;st&gt;-trow.
    ENDLOOP.
    APPEND LINES OF _tmp TO _tmp_code-macro.
  ENDLOOP.

  APPEND LINES OF _tmp_code-def TO code.
  APPEND LINES OF _tmp_code-macro TO code.
  APPEND LINES OF _tmp_code-impl TO code.
  code = clean_code( code ).</SOURCE>
   </ITEM>
  </METHODS>
  <TYPEGROUPS>
   <ITEM TYPEGROUP="ABAP" EXPLICIT="X"/>
   <ITEM TYPEGROUP="SEOP" EXPLICIT="X"/>
  </TYPEGROUPS>
 </RAW>
</ZL_OBJECT>
