<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="0861AB38D8F90AAF882DE420F223710F" CODE_SIGNATURE="05EDBEED93A9317084303E504FE63B3D" CONNECTOR="AAAD0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_INSTALLER_MASTER" TYPE="PROG" VERSION="1.0">
 <DIRECTORY DEVCLASS="ZAPLINK-INSTALLER" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VARCL="X" SUBC="1" RSTAT="K" RMAND="200" RLOAD="E" FIXPT="X" UCCHECK="X"/>
  <SOURCE>`
*---------------------------------------------------------------------*
* Report  ZAPLINK_INSTALLER
*---------------------------------------------------------------------*

REPORT  zaplink_installer MESSAGE-ID zaplink_cx.

INCLUDE zaplink_installer_classes.

SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(30) t_file FOR FIELD p_file.
PARAMETERS p_file TYPE zaplink_file=&gt;t_filename OBLIGATORY.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(30) t_uninst FOR FIELD uninst.
PARAMETERS uninst TYPE flag AS CHECKBOX.
SELECTION-SCREEN END OF LINE.


DATA o_file     TYPE REF TO zaplink_file.
DATA cx_file    TYPE REF TO zaplink_cx_file.

INITIALIZATION.
  t_file = &apos;Container&apos;&apos;s file&apos;.
  t_uninst = &apos;Unistall container if checked&apos;.
  TRY.
      CREATE OBJECT o_file.
      o_file-&gt;set_filetype( zaplink_file=&gt;filetypes-local ).
    CATCH zaplink_cx_file INTO cx_file.
      cx_file-&gt;write( ).
  ENDTRY.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.
  TRY.
      o_file-&gt;load_dialog( p_file ).
      p_file = o_file-&gt;get_filename( ).
    CATCH zaplink_cx_file INTO cx_file.
      IF cx_file-&gt;textid &lt;&gt; zaplink_cx_file=&gt;dialog_canceled.
        cx_file-&gt;write( ).
      ENDIF.
  ENDTRY.

START-OF-SELECTION.
  DATA o_list     TYPE zaplink_container_4inst=&gt;to_list.
  DATA cx_list    TYPE REF TO zaplink_cx_list.
  DATA o_xml     	TYPE REF TO zaplink_container_4inst.
  DATA cx_xml     TYPE REF TO zaplink_cx_container.
  DATA o_options  TYPE REF TO zaplink_options.
  DATA o_o_dir    TYPE REF TO zaplink_opt_directory.
  DATA o_o_devc   TYPE REF TO zaplink_opt_devclass.
  DATA o_o_tr     TYPE REF TO zaplink_opt_transport_request.
  DATA o_comp     TYPE zaplink_container_4inst=&gt;to_component.
  DATA t_comps    TYPE zaplink_list=&gt;tt_compkeys.
  DATA s_comp     LIKE LINE OF t_comps.
  DATA o_activ    TYPE REF TO zaplink_activate.
  DATA d_count    TYPE i.
  DATA d_answer   TYPE c.
  DATA d_msg      TYPE string.
  FIELD-SYMBOLS &lt;c&gt; LIKE LINE OF t_comps.

  TRY.
      o_file-&gt;set_filename( p_file ).
    CATCH zaplink_cx_file INTO cx_file.
      cx_file-&gt;write( ).
  ENDTRY.

  TRY.
      CREATE OBJECT o_options.
      CREATE OBJECT o_o_dir.
      CREATE OBJECT o_o_devc.
      CREATE OBJECT o_o_tr.
      o_options-&gt;set_directory( o_o_dir ).
      o_o_dir-&gt;set_devclass( o_o_devc ).
      o_o_dir-&gt;set_transport_request( o_o_tr ).
      o_o_devc-&gt;set_substitutionkind( zaplink_opt_devclass=&gt;substitutionkinds-no_overwrite ).
      o_o_tr-&gt;set_substitutionkind( zaplink_opt_transport_request=&gt;substitutionkinds-user ). &quot; let user select a transport request for all components
      o_file-&gt;set_filename( p_file ).
    CATCH zaplink_cx_file INTO cx_file.
      cx_file-&gt;write( ).
  ENDTRY.

  TRY.
      CREATE OBJECT o_xml
        EXPORTING
          o_file = o_file.
      o_xml-&gt;set_options( o_options ).
      o_xml-&gt;load_from_file( ).
      TRY.
          o_list = o_xml-&gt;get_content( ).
          IF uninst IS INITIAL.
            o_list-&gt;select_default( zaplink_list=&gt;sel_actions-import ).
          ELSE.
            o_list-&gt;select_default( zaplink_list=&gt;sel_actions-uninstall ).
          ENDIF.
          o_list-&gt;change_selection( ).
        CATCH zaplink_cx_list INTO cx_list.
          cx_list-&gt;write( ).
      ENDTRY.
      IF uninst IS INITIAL.
        o_xml-&gt;transport_to_sap( o_list ).
      ELSE.
        o_xml-&gt;uninstall_from_sap( o_list ).
      ENDIF.
      IF uninst IS INITIAL.
        o_list-&gt;init_sel_iter( ).   o_list-&gt;display_progress = abap_false.
        o_comp = o_list-&gt;get_next( ).
        WHILE o_comp IS BOUND.
          s_comp = o_comp-&gt;get_key( ).    APPEND s_comp TO t_comps.
          o_comp = o_list-&gt;get_next( ).
        ENDWHILE.
        IF NOT t_comps IS INITIAL.
          d_count = LINES( t_comps ).   d_msg = d_count.  CONDENSE d_msg.
          CONCATENATE &apos;Would you activate the objects (&apos; d_msg &apos;) that have been installed&apos; INTO d_msg.
          CALL FUNCTION &apos;POPUP_TO_CONFIRM&apos;
            EXPORTING
              titlebar              = &apos;Activate imported objects&apos;
              text_question         = d_msg
              text_button_1         = &apos;Yes&apos;
              icon_button_1         = &apos;ICON_ACTIVATE&apos;
              text_button_2         = &apos;No&apos;
              icon_button_2         = &apos;ICON_SKIP&apos;
              default_button        = &apos;1&apos;
              display_cancel_button = abap_false
              iv_quickinfo_button_1 = &apos;All object will be activate as far as possible&apos;
              iv_quickinfo_button_2 = &apos;No object activation at all&apos;
            IMPORTING
              answer                = d_answer
            EXCEPTIONS
              text_not_found        = 1
              OTHERS                = 2.
          IF sy-subrc &lt;&gt; 0.
            MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                    WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
          ENDIF.
          IF d_answer CO &apos;YJ1&apos;.
            CREATE OBJECT o_activ
              EXPORTING
                obj_list = t_comps.
            t_comps = o_activ-&gt;activate( ).
          ENDIF.
        ENDIF.
      ENDIF.
      o_xml-&gt;log-&gt;write( ).
      IF uninst IS INITIAL.
        IF d_answer CO &apos;YJ1&apos;.
          IF t_comps IS INITIAL.
            WRITE:/ &apos;All objects sucessfully activated : &apos;, d_count.
          ELSE.
            WRITE:/ &apos;Here is the list of the component(s) that can&apos;&apos;t be activated :&apos;.
            LOOP AT t_comps ASSIGNING &lt;c&gt;.    WRITE:/ &lt;c&gt;-type, &lt;c&gt;-name.   ENDLOOP.
          ENDIF.
        ENDIF.
      ENDIF.
    CATCH zaplink_cx_container INTO cx_xml.
      cx_xml-&gt;write( ).
  ENDTRY.

END-OF-SELECTION.</SOURCE>
  <TEXTSPOOL>
   <ITEM ID="R">
    <TEXTS>
     <ITEM LANGU="E" ENTRY="ZAPLink Installer Master" LENGTH="24 "/>
    </TEXTS>
   </ITEM>
  </TEXTSPOOL>
 </RAW>
</ZL_OBJECT>
