<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="A018D73147781200D6C205BED839AFD4" CODE_SIGNATURE="0331C7C3FD38443482C36E6F41EE3964" CONNECTOR="AAAD0A4B07A5A05AE1000000AC120173" NAME="ZAPLINK_INSTALLER_MASTER" TYPE="PROG" VERSION="1.0">
 <DIRECTORY DEVCLASS="ZAPLINK-DEVTOOLS-INSTALLER" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VARCL="X" SUBC="1" RSTAT="K" RMAND="200" RLOAD="E" FIXPT="X" UCCHECK="X"/>
  <SOURCE>`
*---------------------------------------------------------------------*
* Report  ZAPLINK_INSTALLER
*---------------------------------------------------------------------*

REPORT zaplink_installer MESSAGE-ID zaplink.

INCLUDE zaplink_installer_master_cl.

SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(30) t_file FOR FIELD p_file.
PARAMETERS p_file TYPE zaplink_file=&gt;td_filename OBLIGATORY.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN BEGIN OF BLOCK mode WITH FRAME TITLE t_action.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(30) t_dsp FOR FIELD p_dsp.
PARAMETERS p_dsp TYPE flag RADIOBUTTON GROUP mod DEFAULT &apos;X&apos; USER-COMMAND just_to_call_event.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(30) t_inst FOR FIELD p_inst.
PARAMETERS p_inst TYPE flag RADIOBUTTON GROUP mod.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(30) t_uninst FOR FIELD p_uninst.
PARAMETERS p_uninst TYPE flag RADIOBUTTON GROUP mod.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK mode.

SELECTION-SCREEN BEGIN OF BLOCK devclass WITH FRAME TITLE t_devc.
SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(30) t_novw FOR FIELD p_novw MODIF ID dev.
PARAMETERS p_novw TYPE flag MODIF ID dev RADIOBUTTON GROUP devc.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(30) t_usec FOR FIELD p_usec MODIF ID dev.
PARAMETERS p_usec TYPE flag MODIF ID dev RADIOBUTTON GROUP devc DEFAULT &apos;X&apos;.
SELECTION-SCREEN END OF LINE.

SELECTION-SCREEN BEGIN OF LINE.
SELECTION-SCREEN COMMENT 1(30) t_local FOR FIELD p_local MODIF ID dev.
PARAMETERS p_local TYPE flag MODIF ID dev RADIOBUTTON GROUP devc.
SELECTION-SCREEN END OF LINE.
SELECTION-SCREEN END OF BLOCK devclass.

DATA s_scr_name_devc     TYPE RANGE OF screen-name.
DATA o_file     TYPE REF TO zaplink_file.
DATA cx_file    TYPE REF TO zaplink_cx_file.

INITIALIZATION.
  PERFORM on_initialization.

AT SELECTION-SCREEN.

AT SELECTION-SCREEN OUTPUT.
  PERFORM on_scr_output.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.
  TRY.
      o_file-&gt;load_dialog( p_file ).
      p_file = o_file-&gt;get_filename( ).
    CATCH zaplink_cx_file INTO cx_file.
      IF cx_file-&gt;is_exception_text( zaplink_cx_file=&gt;dialog_canceled ) IS INITIAL.
        cx_file-&gt;write( ).
      ENDIF.
  ENDTRY.

START-OF-SELECTION.
  DATA o_list     TYPE zaplink_container_4inst=&gt;to_list.
  DATA cx_list    TYPE REF TO zaplink_cx_list.
  DATA o_xml     	TYPE REF TO zaplink_container_4inst.
  DATA cx_xml     TYPE REF TO zaplink_cx_container.
  DATA o_options  TYPE REF TO zaplink_options.
  DATA o_o_dir    TYPE REF TO zaplink_opt_directory.
  DATA o_o_devc   TYPE REF TO zaplink_opt_devclass.
  DATA o_o_tr     TYPE REF TO zaplink_opt_transport_request.
  DATA o_comp     TYPE zaplink_container_4inst=&gt;to_component.
  DATA t_comps    TYPE zaplink_list=&gt;tt_compkeys.
  DATA s_comp     LIKE LINE OF t_comps.

  TRY.
      o_file-&gt;set_filename( p_file ).
    CATCH zaplink_cx_file INTO cx_file.
      cx_file-&gt;write( ).
  ENDTRY.

  TRY.
      CREATE OBJECT o_options.
      CREATE OBJECT o_o_dir.
      CREATE OBJECT o_o_devc.
      CREATE OBJECT o_o_tr.
      o_options-&gt;set_directory( o_o_dir ).
      o_o_dir-&gt;set_devclass( o_o_devc ).
      o_o_dir-&gt;set_transport_request( o_o_tr ).
      CASE abap_true.
        WHEN p_novw.    o_o_devc-&gt;set_substitutionkind( zaplink_opt_devclass=&gt;substitutionkinds-no_overwrite ).
        WHEN p_usec.    o_o_devc-&gt;set_substitutionkind( zaplink_opt_devclass=&gt;substitutionkinds-use_container ).
        WHEN p_local.   o_o_devc-&gt;set_substitutionkind( zaplink_opt_devclass=&gt;substitutionkinds-local ).
      ENDCASE.
      o_o_tr-&gt;set_substitutionkind( zaplink_opt_transport_request=&gt;substitutionkinds-user ). &quot; let user select a transport request for all components
      o_file-&gt;set_filename( p_file ).
    CATCH zaplink_cx_file INTO cx_file.
      cx_file-&gt;write( ).
  ENDTRY.

  TRY.
      CREATE OBJECT o_xml
        EXPORTING
          o_file = o_file.
      o_xml-&gt;set_options( o_options ).
      o_xml-&gt;load_from_file( ).
      TRY.
          o_list = o_xml-&gt;get_content( ).
          CASE &apos;X&apos;.
            WHEN p_dsp.
              o_list-&gt;display( ).
            WHEN p_inst.
              o_list-&gt;select_default( zaplink_list=&gt;sel_actions-import ).
              o_list-&gt;change_selection( ).
              o_xml-&gt;transport_to_sap( o_list ).
              o_xml-&gt;log-&gt;write( ).
              PERFORM activate.
            WHEN p_uninst.
              o_list-&gt;select_default( zaplink_list=&gt;sel_actions-uninstall ).
              o_list-&gt;change_selection( ).
              o_xml-&gt;uninstall_from_sap( o_list ).
              o_xml-&gt;log-&gt;write( ).
          ENDCASE.
        CATCH zaplink_cx_list INTO cx_list.
          cx_list-&gt;write( ).
      ENDTRY.
    CATCH zaplink_cx_container INTO cx_xml.
      cx_xml-&gt;write( ).
  ENDTRY.

END-OF-SELECTION.
*---------------------------------------------------------------------*
*      Form  Add_list
*---------------------------------------------------------------------*
FORM add_list USING o_lst TYPE zaplink_container_4inst=&gt;to_list.
  DATA o_comp     TYPE zaplink_container_4inst=&gt;to_component.
  DATA o_sublist  TYPE zaplink_container_4inst=&gt;to_list.
  STATICS: d_bool TYPE abap_bool.

  IF d_bool IS INITIAL.  o_lst-&gt;init_sel_iter( ).   ELSE.   o_lst-&gt;init_iter( ). ENDIF.
  d_bool = abap_true.
  o_lst-&gt;display_progress = abap_false.
  o_comp = o_lst-&gt;get_next( ).
  WHILE o_comp IS BOUND.
    s_comp = o_comp-&gt;get_key( ).    APPEND s_comp TO t_comps.
    o_sublist = o_comp-&gt;get_subcomponents( ).
    IF o_sublist IS BOUND.    PERFORM add_list USING o_sublist.   ENDIF.
    o_comp = o_lst-&gt;get_next( ).
  ENDWHILE.

ENDFORM.                    &quot;Add_list
*---------------------------------------------------------------------*
*      Form  ACTIVATE
*---------------------------------------------------------------------*
FORM activate .
  DATA o_activ    TYPE REF TO zaplink_activate.
  DATA d_count    TYPE i.
  DATA d_answer   TYPE c.
  DATA d_msg      TYPE string.
  FIELD-SYMBOLS &lt;c&gt; LIKE LINE OF t_comps.

  PERFORM add_list USING o_list.
  IF t_comps IS INITIAL. RETURN. ENDIF.
  d_count = LINES( t_comps ).   d_msg = d_count.  CONDENSE d_msg.
  CONCATENATE &apos;Would you like to activate the objects (&apos; d_msg &apos;) that have been installed ?&apos; INTO d_msg. &quot;#EC NOTEXT
  CALL FUNCTION &apos;POPUP_TO_CONFIRM&apos;
    EXPORTING
      titlebar              = &apos;Activate imported objects&apos;   &quot;#EC NOTEXT
      text_question         = d_msg
      text_button_1         = &apos;Yes&apos;                         &quot;#EC NOTEXT
      icon_button_1         = &apos;ICON_ACTIVATE&apos;               &quot;#EC NOTEXT
      text_button_2         = &apos;No&apos;                          &quot;#EC NOTEXT
      icon_button_2         = &apos;ICON_SKIP&apos;                   &quot;#EC NOTEXT
      default_button        = &apos;1&apos;                           &quot;#EC NOTEXT
      display_cancel_button = abap_false
      iv_quickinfo_button_1 = &apos;All object will be activate as far as possible&apos; &quot;#EC NOTEXT
      iv_quickinfo_button_2 = &apos;No object activation at all&apos; &quot;#EC NOTEXT
    IMPORTING
      answer                = d_answer
    EXCEPTIONS
      text_not_found        = 1
      OTHERS                = 2.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
  IF d_answer CO &apos;YJ1&apos;.
    CREATE OBJECT o_activ
      EXPORTING
        obj_list = t_comps.
    t_comps = o_activ-&gt;activate( ).
    IF t_comps IS INITIAL.
      WRITE:/ &apos;All objects sucessfully activated : &apos;, d_count. &quot;#EC NOTEXT
    ELSE.
      WRITE:/ &apos;Here is the list of the component(s) that can&apos;&apos;t be activated :&apos;. &quot;#EC NOTEXT
      LOOP AT t_comps ASSIGNING &lt;c&gt;.    WRITE:/ &lt;c&gt;-type, &lt;c&gt;-name.   ENDLOOP.
    ENDIF.
  ENDIF.
ENDFORM.                    &quot; ACTIVATE
*&amp;---------------------------------------------------------------------*
*&amp;      Form  ON_INITIALIZATION
*&amp;---------------------------------------------------------------------*
FORM on_initialization .
*  DATA clskey TYPE seoclskey.
*  DATA not_active TYPE seox_boolean.
  DATA t_fields TYPE  dyfatc_tab.
  DATA _scr LIKE LINE OF s_scr_name_devc.
  FIELD-SYMBOLS:
    &lt;f&gt; LIKE LINE OF t_fields.

  t_file = &apos;Container&apos;&apos;s file&apos;.                             &quot;#EC NOTEXT
  t_dsp = &apos;Display container&apos;&apos;s containt&apos;.                  &quot;#EC NOTEXT
  t_inst = &apos;Install container&apos;.                             &quot;#EC NOTEXT
  t_uninst = &apos;Uninstall container&apos;.                         &quot;#EC NOTEXT
  t_action = &apos;Action :&apos;.                                    &quot;#EC NOTEXT
  t_devc = &apos;Package :&apos;.                                     &quot;#EC NOTEXT
  t_novw = &apos;Do not overwrite&apos;.                              &quot;#EC NOTEXT
  t_usec = &apos;Use container&apos;&apos;s package&apos;.                      &quot;#EC NOTEXT
  t_local = &apos;Use $TMP&apos;.                                     &quot;#EC NOTEXT
  TRY.
      CREATE OBJECT o_file.
      o_file-&gt;set_filetype( zaplink_file=&gt;filetypes-local ).
    CATCH zaplink_cx_file INTO cx_file.
      cx_file-&gt;write( ).
  ENDTRY.

  CALL FUNCTION &apos;RPY_DYNPRO_READ&apos;
    EXPORTING
      progname                    = sy-cprog
      dynnr                       = sy-dynnr
*     SUPPRESS_EXIST_CHECKS       = &apos; &apos;
*     SUPPRESS_CORR_CHECKS        = &apos; &apos;
*   IMPORTING
*     HEADER                      =
    TABLES
*     CONTAINERS                  =
      fields_to_containers        = t_fields
*     FLOW_LOGIC                  =
*     PARAMS                      =
    EXCEPTIONS
      cancelled                   = 1
      not_found                   = 2
      permission_error            = 3
      OTHERS                      = 4.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  _scr-sign = &apos;I&apos;. _scr-option = &apos;EQ&apos;.
  LOOP AT t_fields ASSIGNING &lt;f&gt;.
    _scr-low = &lt;f&gt;-name.
    CASE &lt;f&gt;-group1.
      WHEN &apos;DEV&apos;.
        APPEND _scr TO s_scr_name_devc.
    ENDCASE.
*    _scr-high = &lt;f&gt;-push_fcode.
*    CASE &lt;f&gt;-push_fcode.      &quot;USER-COMMAND
*      WHEN &apos;DEV&apos;.
*        APPEND _scr TO s_scr_name_devc.
*    ENDCASE.
  ENDLOOP.
ENDFORM.                    &quot; ON_INITIALIZATION
*---------------------------------------------------------------------*
*      Form  on_scr_output
*---------------------------------------------------------------------*
FORM on_scr_output .
* Options : DEVC &amp; TR
  DATA _tab LIKE LINE OF s_scr_name_devc.
  DATA _active TYPE i.
  DATA _name TYPE string.

  IF p_inst IS INITIAL.   _active = 0.    ELSE.   _active = 1.    ENDIF.
  CASE sy-dynnr.
    WHEN &apos;1000&apos;.
      LOOP AT SCREEN.
        CHECK screen-name IN s_scr_name_devc.
        screen-active = _active. MODIFY SCREEN.
      ENDLOOP.
  ENDCASE.
ENDFORM.                    &quot; ON_SCR_OUTPUT</SOURCE>
  <TEXTSPOOL>
   <ITEM ID="R">
    <TEXTS>
     <ITEM LANGU="E" ENTRY="ZAPLink Installer Master" LENGTH="24 "/>
    </TEXTS>
   </ITEM>
  </TEXTSPOOL>
 </RAW>
</ZL_OBJECT>
